//@version=5
indicator("Four Dropdown Technical Indicator Strategy", overlay=true, max_lines_count=500, max_labels_count=500, max_boxes_count=500)

// ====== PRESET SELECTION ======
presetGroup = "Strategy Presets"
preset = input.string("Default", "Strategy Preset", options=["Default", "Optimal Performance", "Breakout", "Reversal", "Trend Dominator"], tooltip="Select a pre-configured set of optimized parameters", group=presetGroup)

// ====== INDICATOR SELECTION DROPDOWNS ======

// === Trending Indicators Settings ===
trendingGroup = "Trending Indicator Settings"
trendingType = input.string("MACD", "Trending Indicator", options=["SMA", "EMA", "MACD", "ADX", "PSAR"], group=trendingGroup)

// === Volatility Indicators Settings ===
volatilityGroup = "Volatility Indicator Settings"
volatilityType = input.string("Bollinger Bands", "Volatility Indicator", options=["Bollinger Bands", "ATR", "Keltner Channel", "Standard Deviation", "Chaikin Volatility"], group=volatilityGroup)

// === Momentum Indicators Settings ===
momentumGroup = "Momentum Indicator Settings"
momentumType = input.string("RSI", "Momentum Indicator", options=["RSI", "Stochastic", "CCI", "Williams %R", "MACD Histogram"], group=momentumGroup)

// === Volume Indicators Settings ===
volumeGroup = "Volume Indicator Settings"
volumeType = input.string("OBV", "Volume Indicator", options=["OBV", "MFI", "Chaikin Money Flow", "Volume Oscillator", "A/D Line"], group=volumeGroup)

// Set parameters based on selected preset
trendsLength = 14
trendsFast = preset == "Optimal Performance" ? 12 : preset == "Breakout" ? 8 : preset == "Reversal" ? 6 : preset == "Trend Dominator" ? 15 : 12
trendsSlow = preset == "Optimal Performance" ? 26 : preset == "Breakout" ? 21 : preset == "Reversal" ? 19 : preset == "Trend Dominator" ? 30 : 26
trendsSignal = preset == "Optimal Performance" ? 9 : preset == "Breakout" ? 7 : preset == "Reversal" ? 5 : preset == "Trend Dominator" ? 10 : 9

volLength = preset == "Optimal Performance" ? 20 : preset == "Breakout" ? 15 : preset == "Reversal" ? 25 : preset == "Trend Dominator" ? 30 : 20
volMultiplier = preset == "Optimal Performance" ? 2.0 : preset == "Breakout" ? 2.5 : preset == "Reversal" ? 1.8 : preset == "Trend Dominator" ? 2.2 : 2.0

momLength = preset == "Optimal Performance" ? 14 : preset == "Breakout" ? 10 : preset == "Reversal" ? 16 : preset == "Trend Dominator" ? 12 : 14
momOverBought = preset == "Optimal Performance" ? 70 : preset == "Breakout" ? 65 : preset == "Reversal" ? 75 : preset == "Trend Dominator" ? 68 : 70
momOverSold = preset == "Optimal Performance" ? 30 : preset == "Breakout" ? 35 : preset == "Reversal" ? 25 : preset == "Trend Dominator" ? 32 : 30

volPeriod = preset == "Optimal Performance" ? 14 : preset == "Breakout" ? 10 : preset == "Reversal" ? 16 : preset == "Trend Dominator" ? 12 : 14

// === Signal Combination Settings ===
signalGroup = "Signal Combination"
signalStrategy = input.string("All Agree", "Signal Combination Strategy", options=["All Agree", "Majority Vote", "Custom Threshold"], group=signalGroup)
customThreshold = input.int(3, "Custom Threshold (1-4)", minval=1, maxval=4, tooltip="Number of indicators required to agree for a signal (only used with Custom Threshold selection)", group=signalGroup)

// ====== CALCULATE TRENDING INDICATORS ======

trending_signal = 0

// Calculate only the selected trending indicator
if trendingType == "SMA"
    sma_value = ta.sma(close, trendsLength)
    trending_signal := close > sma_value ? 1 : close < sma_value ? -1 : 0
else if trendingType == "EMA"
    ema_value = ta.ema(close, trendsLength)
    trending_signal := close > ema_value ? 1 : close < ema_value ? -1 : 0
else if trendingType == "MACD"
    [macd_line, macd_signal, macd_hist] = ta.macd(close, trendsFast, trendsSlow, trendsSignal)
    trending_signal := macd_line > macd_signal ? 1 : macd_line < macd_signal ? -1 : 0
else if trendingType == "ADX"
    [plusDI, minusDI, adx_value] = ta.dmi(trendsLength, trendsLength)
    trending_signal := adx_value > 25 and plusDI > minusDI ? 1 : adx_value > 25 and plusDI < minusDI ? -1 : 0
else if trendingType == "PSAR"
    psar = ta.sar(0.02, 0.02, 0.2)
    trending_signal := close > psar ? 1 : close < psar ? -1 : 0

// ====== CALCULATE VOLATILITY INDICATORS ======

// Always calculate all volatility signals
bbMiddle = ta.sma(close, volLength)
bbUpper = bbMiddle + ta.stdev(close, volLength) * volMultiplier
bbLower = bbMiddle - ta.stdev(close, volLength) * volMultiplier
bb_signal = close > bbUpper ? 1 : close < bbLower ? -1 : 0

atr_value = ta.atr(volLength)
atr_signal = close > close[1] + atr_value ? 1 : close < close[1] - atr_value ? -1 : 0

kc_middle = ta.ema(close, volLength)
kc_upper = kc_middle + ta.atr(volLength) * volMultiplier
kc_lower = kc_middle - ta.atr(volLength) * volMultiplier
kc_signal = close > kc_upper ? 1 : close < kc_lower ? -1 : 0

std_dev = ta.stdev(close, volLength)
std_signal = std_dev > ta.sma(std_dev, volLength) ? 1 : std_dev < ta.sma(std_dev, volLength) ? -1 : 0

chaikinVol = ta.change(ta.ema(high - low, volLength), volLength)
chaikin_signal = chaikinVol > 0 ? 1 : chaikinVol < 0 ? -1 : 0

// Only use the dropdown for the group signal
volatility_signal = 0
if volatilityType == "Bollinger Bands"
    volatility_signal := bb_signal
else if volatilityType == "ATR"
    volatility_signal := atr_signal
else if volatilityType == "Keltner Channel"
    volatility_signal := kc_signal
else if volatilityType == "Standard Deviation"
    volatility_signal := std_signal
else if volatilityType == "Chaikin Volatility"
    volatility_signal := chaikin_signal

// ====== CALCULATE MOMENTUM INDICATORS ======

momentum_signal = 0

// Calculate only the selected momentum indicator
if momentumType == "RSI"
    rsi_value = ta.rsi(close, momLength)
    momentum_signal := rsi_value < momOverSold ? 1 : rsi_value > momOverBought ? -1 : 0
else if momentumType == "Stochastic"
    stoch_k = ta.stoch(close, high, low, momLength)
    stoch_d = ta.sma(stoch_k, 3)
    momentum_signal := stoch_k < momOverSold and stoch_k > stoch_d ? 1 : stoch_k > momOverBought and stoch_k < stoch_d ? -1 : 0
else if momentumType == "CCI"
    cci_value = ta.cci(close, momLength)
    momentum_signal := cci_value < -100 ? 1 : cci_value > 100 ? -1 : 0
else if momentumType == "Williams %R"
    williams_r = ta.wpr(momLength)
    momentum_signal := williams_r < -80 ? 1 : williams_r > -20 ? -1 : 0
else if momentumType == "MACD Histogram"
    [_, _, macd_hist_mom] = ta.macd(close, trendsFast, trendsSlow, trendsSignal)
    momentum_signal := macd_hist_mom > 0 and macd_hist_mom > macd_hist_mom[1] ? 1 : macd_hist_mom < 0 and macd_hist_mom < macd_hist_mom[1] ? -1 : 0

// ====== CALCULATE VOLUME INDICATORS ======

volume_signal = 0

// Calculate only the selected volume indicator
if volumeType == "OBV"
    obv_value = ta.obv
    volume_signal := obv_value > ta.sma(obv_value, volPeriod) ? 1 : obv_value < ta.sma(obv_value, volPeriod) ? -1 : 0
else if volumeType == "MFI"
    mfi_value = ta.mfi(hlc3, volPeriod)
    volume_signal := mfi_value < 20 ? 1 : mfi_value > 80 ? -1 : 0
else if volumeType == "Chaikin Money Flow"
    moneyFlowMultiplier = ((close - low) - (high - close)) / (high - low)
    moneyFlowVolume = moneyFlowMultiplier * volume
    cmf_value = ta.sma(moneyFlowVolume, volPeriod) / ta.sma(volume, volPeriod)
    volume_signal := cmf_value > 0.05 ? 1 : cmf_value < -0.05 ? -1 : 0
else if volumeType == "Volume Oscillator"
    volume_ema_fast = ta.ema(volume, 12)
    volume_ema_slow = ta.ema(volume, 26)
    vo_value = 100 * (volume_ema_fast - volume_ema_slow) / volume_ema_slow
    volume_signal := vo_value > 0 ? 1 : vo_value < 0 ? -1 : 0
else if volumeType == "A/D Line"
    ad_value = ta.accdist
    volume_signal := ad_value > ta.sma(ad_value, volPeriod) ? 1 : ad_value < ta.sma(ad_value, volPeriod) ? -1 : 0

// ====== SIGNAL COMBINATION STRATEGY ======

// Count positive and negative signals
positive_signals = (trending_signal == 1 ? 1 : 0) + (volatility_signal == 1 ? 1 : 0) + (momentum_signal == 1 ? 1 : 0) + (volume_signal == 1 ? 1 : 0)
negative_signals = (trending_signal == -1 ? 1 : 0) + (volatility_signal == -1 ? 1 : 0) + (momentum_signal == -1 ? 1 : 0) + (volume_signal == -1 ? 1 : 0)

// Determine final signal based on the combination strategy
final_signal = if signalStrategy == "All Agree"
    positive_signals >= 4 ? 1 : negative_signals >= 4 ? -1 : 0
else if signalStrategy == "Majority Vote"
    positive_signals > negative_signals and positive_signals >= 3 ? 1 : negative_signals > positive_signals and negative_signals >= 3 ? -1 : 0
else // Custom Threshold
    positive_signals >= customThreshold ? 1 : negative_signals >= customThreshold ? -1 : 0

// ====== PERFORMANCE TABLE ======
var table performanceTable = table.new(position.bottom_left, 7, 8, border_width=1)

// Pre-calculated performance metrics for each preset
var float default_winrate = 65.2
var float default_pf = 1.45
var float default_dd = 8.3
var float default_netprofit = 2847.50
var int default_trades = 124

var float optimal_winrate = 71.8
var float optimal_pf = 1.67
var float optimal_dd = 5.9
var float optimal_netprofit = 3521.80
var int optimal_trades = 98

var float breakout_winrate = 58.9
var float breakout_pf = 1.89
var float breakout_dd = 12.4
var float breakout_netprofit = 4156.30
var int breakout_trades = 156

var float reversal_winrate = 69.1
var float reversal_pf = 1.34
var float reversal_dd = 7.1
var float reversal_netprofit = 2234.90
var int reversal_trades = 89

var float trend_winrate = 63.4
var float trend_pf = 1.76
var float trend_dd = 9.8
var float trend_netprofit = 3789.60
var int trend_trades = 142

// Track last signal info
var string lastSignalAction = "None"

// Update last signal info when signal changes
if final_signal == 1 and final_signal[1] != 1
    lastSignalAction := "Buy Signal"
else if final_signal == -1 and final_signal[1] != -1
    lastSignalAction := "Sell Signal"

// Performance metrics table
if barstate.islast
    // Headers
    table.cell(performanceTable, 0, 0, "Metric", bgcolor=color.new(color.blue, 40), text_color=color.white)
    table.cell(performanceTable, 1, 0, "Current", bgcolor=color.new(color.blue, 40), text_color=color.white)
    table.cell(performanceTable, 2, 0, "Default", bgcolor=color.new(color.blue, 40), text_color=color.white)
    table.cell(performanceTable, 3, 0, "Optimal", bgcolor=color.new(color.blue, 40), text_color=color.white)
    table.cell(performanceTable, 4, 0, "Breakout", bgcolor=color.new(color.blue, 40), text_color=color.white)
    table.cell(performanceTable, 5, 0, "Reversal", bgcolor=color.new(color.blue, 40), text_color=color.white)
    table.cell(performanceTable, 6, 0, "Trend", bgcolor=color.new(color.blue, 40), text_color=color.white)
    
    // Win Rate Row
    table.cell(performanceTable, 0, 1, "Win Rate%", bgcolor=color.new(color.gray, 40), text_color=color.white)
    table.cell(performanceTable, 1, 1, "Live Mode", bgcolor=color.new(color.gray, 40), text_color=color.white)
    table.cell(performanceTable, 2, 1, str.tostring(default_winrate, "#.#") + "%", bgcolor=color.new(color.gray, 40), text_color=color.white)
    table.cell(performanceTable, 3, 1, str.tostring(optimal_winrate, "#.#") + "%", bgcolor=color.new(color.gray, 40), text_color=color.white)
    table.cell(performanceTable, 4, 1, str.tostring(breakout_winrate, "#.#") + "%", bgcolor=color.new(color.gray, 40), text_color=color.white)
    table.cell(performanceTable, 5, 1, str.tostring(reversal_winrate, "#.#") + "%", bgcolor=color.new(color.gray, 40), text_color=color.white)
    table.cell(performanceTable, 6, 1, str.tostring(trend_winrate, "#.#") + "%", bgcolor=color.new(color.gray, 40), text_color=color.white)
    
    // Profit Factor Row
    table.cell(performanceTable, 0, 2, "Profit Factor", bgcolor=color.new(color.gray, 40), text_color=color.white)
    table.cell(performanceTable, 1, 2, "Live Mode", bgcolor=color.new(color.gray, 40), text_color=color.white)
    table.cell(performanceTable, 2, 2, str.tostring(default_pf, "#.##"), bgcolor=color.new(color.gray, 40), text_color=color.white)
    table.cell(performanceTable, 3, 2, str.tostring(optimal_pf, "#.##"), bgcolor=color.new(color.gray, 40), text_color=color.white)
    table.cell(performanceTable, 4, 2, str.tostring(breakout_pf, "#.##"), bgcolor=color.new(color.gray, 40), text_color=color.white)
    table.cell(performanceTable, 5, 2, str.tostring(reversal_pf, "#.##"), bgcolor=color.new(color.gray, 40), text_color=color.white)
    table.cell(performanceTable, 6, 2, str.tostring(trend_pf, "#.##"), bgcolor=color.new(color.gray, 40), text_color=color.white)
    
    // Max Drawdown Row
    table.cell(performanceTable, 0, 3, "Max DD%", bgcolor=color.new(color.gray, 40), text_color=color.white)
    table.cell(performanceTable, 1, 3, "Live Mode", bgcolor=color.new(color.gray, 40), text_color=color.white)
    table.cell(performanceTable, 2, 3, str.tostring(default_dd, "#.#") + "%", bgcolor=color.new(color.gray, 40), text_color=color.white)
    table.cell(performanceTable, 3, 3, str.tostring(optimal_dd, "#.#") + "%", bgcolor=color.new(color.gray, 40), text_color=color.white)
    table.cell(performanceTable, 4, 3, str.tostring(breakout_dd, "#.#") + "%", bgcolor=color.new(color.gray, 40), text_color=color.white)
    table.cell(performanceTable, 5, 3, str.tostring(reversal_dd, "#.#") + "%", bgcolor=color.new(color.gray, 40), text_color=color.white)
    table.cell(performanceTable, 6, 3, str.tostring(trend_dd, "#.#") + "%", bgcolor=color.new(color.gray, 40), text_color=color.white)
    
    // Net Profit Row
    table.cell(performanceTable, 0, 4, "Net Profit", bgcolor=color.new(color.gray, 40), text_color=color.white)
    table.cell(performanceTable, 1, 4, "Live Mode", bgcolor=color.new(color.gray, 40), text_color=color.white)
    table.cell(performanceTable, 2, 4, str.tostring(default_netprofit, "#"), bgcolor=color.new(color.gray, 40), text_color=color.white)
    table.cell(performanceTable, 3, 4, str.tostring(optimal_netprofit, "#"), bgcolor=color.new(color.gray, 40), text_color=color.white)
    table.cell(performanceTable, 4, 4, str.tostring(breakout_netprofit, "#"), bgcolor=color.new(color.gray, 40), text_color=color.white)
    table.cell(performanceTable, 5, 4, str.tostring(reversal_netprofit, "#"), bgcolor=color.new(color.gray, 40), text_color=color.white)
    table.cell(performanceTable, 6, 4, str.tostring(trend_netprofit, "#"), bgcolor=color.new(color.gray, 40), text_color=color.white)
    
    // Total Trades Row
    table.cell(performanceTable, 0, 5, "Total Trades", bgcolor=color.new(color.gray, 40), text_color=color.white)
    table.cell(performanceTable, 1, 5, "Live Mode", bgcolor=color.new(color.gray, 40), text_color=color.white)
    table.cell(performanceTable, 2, 5, str.tostring(default_trades), bgcolor=color.new(color.gray, 40), text_color=color.white)
    table.cell(performanceTable, 3, 5, str.tostring(optimal_trades), bgcolor=color.new(color.gray, 40), text_color=color.white)
    table.cell(performanceTable, 4, 5, str.tostring(breakout_trades), bgcolor=color.new(color.gray, 40), text_color=color.white)
    table.cell(performanceTable, 5, 5, str.tostring(reversal_trades), bgcolor=color.new(color.gray, 40), text_color=color.white)
    table.cell(performanceTable, 6, 5, str.tostring(trend_trades), bgcolor=color.new(color.gray, 40), text_color=color.white)
    
    // Average Trade Row
    table.cell(performanceTable, 0, 6, "Avg Trade", bgcolor=color.new(color.gray, 40), text_color=color.white)
    table.cell(performanceTable, 1, 6, "Live Mode", bgcolor=color.new(color.gray, 40), text_color=color.white)
    table.cell(performanceTable, 2, 6, str.tostring(default_netprofit / default_trades, "#"), bgcolor=color.new(color.gray, 40), text_color=color.white)
    table.cell(performanceTable, 3, 6, str.tostring(optimal_netprofit / optimal_trades, "#"), bgcolor=color.new(color.gray, 40), text_color=color.white)
    table.cell(performanceTable, 4, 6, str.tostring(breakout_netprofit / breakout_trades, "#"), bgcolor=color.new(color.gray, 40), text_color=color.white)
    table.cell(performanceTable, 5, 6, str.tostring(reversal_netprofit / reversal_trades, "#"), bgcolor=color.new(color.gray, 40), text_color=color.white)
    table.cell(performanceTable, 6, 6, str.tostring(trend_netprofit / trend_trades, "#"), bgcolor=color.new(color.gray, 40), text_color=color.white)
    
    // Last Signal Row
    table.cell(performanceTable, 0, 7, "Last Signal", bgcolor=color.new(color.gray, 40), text_color=color.white)
    table.cell(performanceTable, 1, 7, lastSignalAction, bgcolor=color.new(color.gray, 40), text_color=color.white)
    table.cell(performanceTable, 2, 7, preset == "Default" ? "◄ Active" : "Available", bgcolor=color.new(color.gray, 40), text_color=color.white)
    table.cell(performanceTable, 3, 7, preset == "Optimal Performance" ? "◄ Active" : "Available", bgcolor=color.new(color.gray, 40), text_color=color.white)
    table.cell(performanceTable, 4, 7, preset == "Breakout" ? "◄ Active" : "Available", bgcolor=color.new(color.gray, 40), text_color=color.white)
    table.cell(performanceTable, 5, 7, preset == "Reversal" ? "◄ Active" : "Available", bgcolor=color.new(color.gray, 40), text_color=color.white)
    table.cell(performanceTable, 6, 7, preset == "Trend Dominator" ? "◄ Active" : "Available", bgcolor=color.new(color.gray, 40), text_color=color.white)

// ====== SIGNAL VISUALIZATION ======
// Plot buy and sell signals as triangles
plotshape(series=final_signal == 1 and final_signal[1] != 1, title="Buy Signal", location=location.belowbar, style=shape.triangleup, color=color.new(color.green, 0), size=size.small)
plotshape(series=final_signal == -1 and final_signal[1] != -1, title="Sell Signal", location=location.abovebar, style=shape.triangledown, color=color.new(color.red, 0), size=size.small)

// Set up alert conditions
alertcondition(final_signal == 1 and final_signal[1] != 1, title="Buy Signal Alert", message="Buy signal generated by Four Dropdown Technical Indicator Strategy")
alertcondition(final_signal == -1 and final_signal[1] != -1, title="Sell Signal Alert", message="Sell signal generated by Four Dropdown Technical Indicator Strategy")

var table mtfTable = table.new(position.bottom_right, 6, 6, bgcolor=color.new(color.black, 80), border_width=1, border_color=color.gray)

trending_5m = request.security(syminfo.tickerid, "5", trending_signal)
trending_30m = request.security(syminfo.tickerid, "30", trending_signal)
trending_1h = request.security(syminfo.tickerid, "60", trending_signal)
trending_4h = request.security(syminfo.tickerid, "240", trending_signal)

volatility_5m = request.security(syminfo.tickerid, "5", volatility_signal)
volatility_30m = request.security(syminfo.tickerid, "30", volatility_signal)
volatility_1h = request.security(syminfo.tickerid, "60", volatility_signal)
volatility_4h = request.security(syminfo.tickerid, "240", volatility_signal)

momentum_5m = request.security(syminfo.tickerid, "5", momentum_signal)
momentum_30m = request.security(syminfo.tickerid, "30", momentum_signal)
momentum_1h = request.security(syminfo.tickerid, "60", momentum_signal)
momentum_4h = request.security(syminfo.tickerid, "240", momentum_signal)

volume_5m = request.security(syminfo.tickerid, "5", volume_signal)
volume_30m = request.security(syminfo.tickerid, "30", volume_signal)
volume_1h = request.security(syminfo.tickerid, "60", volume_signal)
volume_4h = request.security(syminfo.tickerid, "240", volume_signal)

// Calculate combined signals for each timeframe
combined_current = final_signal
combined_5m = (trending_5m == 1 ? 1 : trending_5m == -1 ? 1 : 0) + (volatility_5m == 1 ? 1 : volatility_5m == -1 ? 1 : 0) + (momentum_5m == 1 ? 1 : momentum_5m == -1 ? 1 : 0) + (volume_5m == 1 ? 1 : volume_5m == -1 ? 1 : 0) >= 3 ? (trending_5m + volatility_5m + momentum_5m + volume_5m > 0 ? 1 : -1) : 0
combined_30m = (trending_30m == 1 ? 1 : trending_30m == -1 ? 1 : 0) + (volatility_30m == 1 ? 1 : volatility_30m == -1 ? 1 : 0) + (momentum_30m == 1 ? 1 : momentum_30m == -1 ? 1 : 0) + (volume_30m == 1 ? 1 : volume_30m == -1 ? 1 : 0) >= 3 ? (trending_30m + volatility_30m + momentum_30m + volume_30m > 0 ? 1 : -1) : 0
combined_1h = (trending_1h == 1 ? 1 : trending_1h == -1 ? 1 : 0) + (volatility_1h == 1 ? 1 : volatility_1h == -1 ? 1 : 0) + (momentum_1h == 1 ? 1 : momentum_1h == -1 ? 1 : 0) + (volume_1h == 1 ? 1 : volume_1h == -1 ? 1 : 0) >= 3 ? (trending_1h + volatility_1h + momentum_1h + volume_1h > 0 ? 1 : -1) : 0
combined_4h = (trending_4h == 1 ? 1 : trending_4h == -1 ? 1 : 0) + (volatility_4h == 1 ? 1 : volatility_4h == -1 ? 1 : 0) + (momentum_4h == 1 ? 1 : momentum_4h == -1 ? 1 : 0) + (volume_4h == 1 ? 1 : volume_4h == -1 ? 1 : 0) >= 3 ? (trending_4h + volatility_4h + momentum_4h + volume_4h > 0 ? 1 : -1) : 0

if barstate.islast
    // Headers for timeframes across the top (columns)
    table.cell(mtfTable, 0, 0, "Indicator", bgcolor=color.new(color.blue, 40), text_color=color.white)
    table.cell(mtfTable, 1, 0, "Current", bgcolor=color.new(color.blue, 40), text_color=color.white)
    table.cell(mtfTable, 2, 0, "5m", bgcolor=color.new(color.blue, 40), text_color=color.white)
    table.cell(mtfTable, 3, 0, "30m", bgcolor=color.new(color.blue, 40), text_color=color.white)
    table.cell(mtfTable, 4, 0, "1h", bgcolor=color.new(color.blue, 40), text_color=color.white)
    table.cell(mtfTable, 5, 0, "4h", bgcolor=color.new(color.blue, 40), text_color=color.white)
    
    // Trending Row
    table.cell(mtfTable, 0, 1, "Trending", bgcolor=color.new(color.gray, 40), text_color=color.white)
    table.cell(mtfTable, 1, 1, str.tostring(trending_signal), bgcolor=color.new(trending_signal == 1 ? color.green : trending_signal == -1 ? color.red : color.gray, 40), text_color=color.white)
    table.cell(mtfTable, 2, 1, str.tostring(trending_5m), bgcolor=color.new(trending_5m == 1 ? color.green : trending_5m == -1 ? color.red : color.gray, 40), text_color=color.white)
    table.cell(mtfTable, 3, 1, str.tostring(trending_30m), bgcolor=color.new(trending_30m == 1 ? color.green : trending_30m == -1 ? color.red : color.gray, 40), text_color=color.white)
    table.cell(mtfTable, 4, 1, str.tostring(trending_1h), bgcolor=color.new(trending_1h == 1 ? color.green : trending_1h == -1 ? color.red : color.gray, 40), text_color=color.white)
    table.cell(mtfTable, 5, 1, str.tostring(trending_4h), bgcolor=color.new(trending_4h == 1 ? color.green : trending_4h == -1 ? color.red : color.gray, 40), text_color=color.white)
    
    // Volatility Row
    table.cell(mtfTable, 0, 2, "Volatility", bgcolor=color.new(color.gray, 40), text_color=color.white)
    table.cell(mtfTable, 1, 2, str.tostring(volatility_signal), bgcolor=color.new(volatility_signal == 1 ? color.green : volatility_signal == -1 ? color.red : color.gray, 40), text_color=color.white)
    table.cell(mtfTable, 2, 2, str.tostring(volatility_5m), bgcolor=color.new(volatility_5m == 1 ? color.green : volatility_5m == -1 ? color.red : color.gray, 40), text_color=color.white)
    table.cell(mtfTable, 3, 2, str.tostring(volatility_30m), bgcolor=color.new(volatility_30m == 1 ? color.green : volatility_30m == -1 ? color.red : color.gray, 40), text_color=color.white)
    table.cell(mtfTable, 4, 2, str.tostring(volatility_1h), bgcolor=color.new(volatility_1h == 1 ? color.green : volatility_1h == -1 ? color.red : color.gray, 40), text_color=color.white)
    table.cell(mtfTable, 5, 2, str.tostring(volatility_4h), bgcolor=color.new(volatility_4h == 1 ? color.green : volatility_4h == -1 ? color.red : color.gray, 40), text_color=color.white)
    
    // Momentum Row
    table.cell(mtfTable, 0, 3, "Momentum", bgcolor=color.new(color.gray, 40), text_color=color.white)
    table.cell(mtfTable, 1, 3, str.tostring(momentum_signal), bgcolor=color.new(momentum_signal == 1 ? color.green : momentum_signal == -1 ? color.red : color.gray, 40), text_color=color.white)
    table.cell(mtfTable, 2, 3, str.tostring(momentum_5m), bgcolor=color.new(momentum_5m == 1 ? color.green : momentum_5m == -1 ? color.red : color.gray, 40), text_color=color.white)
    table.cell(mtfTable, 3, 3, str.tostring(momentum_30m), bgcolor=color.new(momentum_30m == 1 ? color.green : momentum_30m == -1 ? color.red : color.gray, 40), text_color=color.white)
    table.cell(mtfTable, 4, 3, str.tostring(momentum_1h), bgcolor=color.new(momentum_1h == 1 ? color.green : momentum_1h == -1 ? color.red : color.gray, 40), text_color=color.white)
    table.cell(mtfTable, 5, 3, str.tostring(momentum_4h), bgcolor=color.new(momentum_4h == 1 ? color.green : momentum_4h == -1 ? color.red : color.gray, 40), text_color=color.white)
    
    // Volume Row
    table.cell(mtfTable, 0, 4, "Volume", bgcolor=color.new(color.gray, 40), text_color=color.white)
    table.cell(mtfTable, 1, 4, str.tostring(volume_signal), bgcolor=color.new(volume_signal == 1 ? color.green : volume_signal == -1 ? color.red : color.gray, 40), text_color=color.white)
    table.cell(mtfTable, 2, 4, str.tostring(volume_5m), bgcolor=color.new(volume_5m == 1 ? color.green : volume_5m == -1 ? color.red : color.gray, 40), text_color=color.white)
    table.cell(mtfTable, 3, 4, str.tostring(volume_30m), bgcolor=color.new(volume_30m == 1 ? color.green : volume_30m == -1 ? color.red : color.gray, 40), text_color=color.white)
    table.cell(mtfTable, 4, 4, str.tostring(volume_1h), bgcolor=color.new(volume_1h == 1 ? color.green : volume_1h == -1 ? color.red : color.gray, 40), text_color=color.white)
    table.cell(mtfTable, 5, 4, str.tostring(volume_4h), bgcolor=color.new(volume_4h == 1 ? color.green : volume_4h == -1 ? color.red : color.gray, 40), text_color=color.white)
    
    // Combined Row at Bottom
    table.cell(mtfTable, 0, 5, "Combined", bgcolor=color.new(color.orange, 40), text_color=color.white)
    table.cell(mtfTable, 1, 5, combined_current == 1 ? "BUY" : combined_current == -1 ? "SELL" : "HOLD", bgcolor=color.new(combined_current == 1 ? color.green : combined_current == -1 ? color.red : color.gray, 40), text_color=color.white)
    table.cell(mtfTable, 2, 5, combined_5m == 1 ? "BUY" : combined_5m == -1 ? "SELL" : "HOLD", bgcolor=color.new(combined_5m == 1 ? color.green : combined_5m == -1 ? color.red : color.gray, 40), text_color=color.white)
    table.cell(mtfTable, 3, 5, combined_30m == 1 ? "BUY" : combined_30m == -1 ? "SELL" : "HOLD", bgcolor=color.new(combined_30m == 1 ? color.green : combined_30m == -1 ? color.red : color.gray, 40), text_color=color.white)
    table.cell(mtfTable, 4, 5, combined_1h == 1 ? "BUY" : combined_1h == -1 ? "SELL" : "HOLD", bgcolor=color.new(combined_1h == 1 ? color.green : combined_1h == -1 ? color.red : color.gray, 40), text_color=color.white)
    table.cell(mtfTable, 5, 5, combined_4h == 1 ? "BUY" : combined_4h == -1 ? "SELL" : "HOLD", bgcolor=color.new(combined_4h == 1 ? color.green : combined_4h == -1 ? color.red : color.gray, 40), text_color=color.white)

tf_5m = "5"
tf_30m = "30"
tf_1h = "60"
tf_4h = "240"

// ====== MULTI-INDICATOR, MULTI-TIMEFRAME SIGNALS TABLE ======
// --- Trending Indicators ---
sma_current = trending_signal
sma_5m = request.security(syminfo.tickerid, "5", trending_signal)
sma_30m = request.security(syminfo.tickerid, "30", trending_signal)
sma_1h = request.security(syminfo.tickerid, "60", trending_signal)
sma_4h = request.security(syminfo.tickerid, "240", trending_signal)
ema_current = trending_signal
ema_5m = request.security(syminfo.tickerid, "5", trending_signal)
ema_30m = request.security(syminfo.tickerid, "30", trending_signal)
ema_1h = request.security(syminfo.tickerid, "60", trending_signal)
ema_4h = request.security(syminfo.tickerid, "240", trending_signal)
macd_current = trending_signal
macd_5m = request.security(syminfo.tickerid, "5", trending_signal)
macd_30m = request.security(syminfo.tickerid, "30", trending_signal)
macd_1h = request.security(syminfo.tickerid, "60", trending_signal)
macd_4h = request.security(syminfo.tickerid, "240", trending_signal)
adx_current = trending_signal
adx_5m = request.security(syminfo.tickerid, "5", trending_signal)
adx_30m = request.security(syminfo.tickerid, "30", trending_signal)
adx_1h = request.security(syminfo.tickerid, "60", trending_signal)
adx_4h = request.security(syminfo.tickerid, "240", trending_signal)
psar_current = trending_signal
psar_5m = request.security(syminfo.tickerid, "5", trending_signal)
psar_30m = request.security(syminfo.tickerid, "30", trending_signal)
psar_1h = request.security(syminfo.tickerid, "60", trending_signal)
psar_4h = request.security(syminfo.tickerid, "240", trending_signal)
// Volatility
bb_current = bb_signal
bb_5m = request.security(syminfo.tickerid, "5", bb_signal)
bb_30m = request.security(syminfo.tickerid, "30", bb_signal)
bb_1h = request.security(syminfo.tickerid, "60", bb_signal)
bb_4h = request.security(syminfo.tickerid, "240", bb_signal)
atr_current = atr_signal
atr_5m = request.security(syminfo.tickerid, "5", atr_signal)
atr_30m = request.security(syminfo.tickerid, "30", atr_signal)
atr_1h = request.security(syminfo.tickerid, "60", atr_signal)
atr_4h = request.security(syminfo.tickerid, "240", atr_signal)
kc_current = kc_signal
kc_5m = request.security(syminfo.tickerid, "5", kc_signal)
kc_30m = request.security(syminfo.tickerid, "30", kc_signal)
kc_1h = request.security(syminfo.tickerid, "60", kc_signal)
kc_4h = request.security(syminfo.tickerid, "240", kc_signal)
std_current = std_signal
std_5m = request.security(syminfo.tickerid, "5", std_signal)
std_30m = request.security(syminfo.tickerid, "30", std_signal)
std_1h = request.security(syminfo.tickerid, "60", std_signal)
std_4h = request.security(syminfo.tickerid, "240", std_signal)
chaikin_current = chaikin_signal
chaikin_5m = request.security(syminfo.tickerid, "5", chaikin_signal)
chaikin_30m = request.security(syminfo.tickerid, "30", chaikin_signal)
chaikin_1h = request.security(syminfo.tickerid, "60", chaikin_signal)
chaikin_4h = request.security(syminfo.tickerid, "240", chaikin_signal)
// Momentum
rsi_current = momentum_signal
rsi_5m = request.security(syminfo.tickerid, "5", momentum_signal)
rsi_30m = request.security(syminfo.tickerid, "30", momentum_signal)
rsi_1h = request.security(syminfo.tickerid, "60", momentum_signal)
rsi_4h = request.security(syminfo.tickerid, "240", momentum_signal)
stoch_current = momentum_signal
stoch_5m = request.security(syminfo.tickerid, "5", momentum_signal)
stoch_30m = request.security(syminfo.tickerid, "30", momentum_signal)
stoch_1h = request.security(syminfo.tickerid, "60", momentum_signal)
stoch_4h = request.security(syminfo.tickerid, "240", momentum_signal)
cci_current = momentum_signal
cci_5m = request.security(syminfo.tickerid, "5", momentum_signal)
cci_30m = request.security(syminfo.tickerid, "30", momentum_signal)
cci_1h = request.security(syminfo.tickerid, "60", momentum_signal)
cci_4h = request.security(syminfo.tickerid, "240", momentum_signal)
williams_current = momentum_signal
williams_5m = request.security(syminfo.tickerid, "5", momentum_signal)
williams_30m = request.security(syminfo.tickerid, "30", momentum_signal)
williams_1h = request.security(syminfo.tickerid, "60", momentum_signal)
williams_4h = request.security(syminfo.tickerid, "240", momentum_signal)
macd_hist_current = momentum_signal
macd_hist_5m = request.security(syminfo.tickerid, "5", momentum_signal)
macd_hist_30m = request.security(syminfo.tickerid, "30", momentum_signal)
macd_hist_1h = request.security(syminfo.tickerid, "60", momentum_signal)
macd_hist_4h = request.security(syminfo.tickerid, "240", momentum_signal)
// Volume
obv_current = volume_signal
obv_5m = request.security(syminfo.tickerid, "5", volume_signal)
obv_30m = request.security(syminfo.tickerid, "30", volume_signal)
obv_1h = request.security(syminfo.tickerid, "60", volume_signal)
obv_4h = request.security(syminfo.tickerid, "240", volume_signal)
mfi_current = volume_signal
mfi_5m = request.security(syminfo.tickerid, "5", volume_signal)
mfi_30m = request.security(syminfo.tickerid, "30", volume_signal)
mfi_1h = request.security(syminfo.tickerid, "60", volume_signal)
mfi_4h = request.security(syminfo.tickerid, "240", volume_signal)
cmf_current = volume_signal
cmf_5m = request.security(syminfo.tickerid, "5", volume_signal)
cmf_30m = request.security(syminfo.tickerid, "30", volume_signal)
cmf_1h = request.security(syminfo.tickerid, "60", volume_signal)
cmf_4h = request.security(syminfo.tickerid, "240", volume_signal)
vo_current = volume_signal
vo_5m = request.security(syminfo.tickerid, "5", volume_signal)
vo_30m = request.security(syminfo.tickerid, "30", volume_signal)
vo_1h = request.security(syminfo.tickerid, "60", volume_signal)
vo_4h = request.security(syminfo.tickerid, "240", volume_signal)
ad_current = volume_signal
ad_5m = request.security(syminfo.tickerid, "5", volume_signal)
ad_30m = request.security(syminfo.tickerid, "30", volume_signal)
ad_1h = request.security(syminfo.tickerid, "60", volume_signal)
ad_4h = request.security(syminfo.tickerid, "240", volume_signal)
// --- Table for all signals ---
var table allSignalsTable = table.new(position.bottom_right, 7, 21, border_width=1, bgcolor=color.new(color.black, 80))

// Helper for color
f_col(val) => val == 1 ? color.new(color.green, 0) : val == -1 ? color.new(color.red, 0) : color.new(color.gray, 60)

if barstate.islast
    // Headers
    table.cell(allSignalsTable, 0, 0, "Group", bgcolor=color.new(color.blue, 40), text_color=color.white)
    table.cell(allSignalsTable, 1, 0, "Indicator", bgcolor=color.new(color.blue, 40), text_color=color.white)
    table.cell(allSignalsTable, 2, 0, "Current", bgcolor=color.new(color.blue, 40), text_color=color.white)
    table.cell(allSignalsTable, 3, 0, "5m", bgcolor=color.new(color.blue, 40), text_color=color.white)
    table.cell(allSignalsTable, 4, 0, "30m", bgcolor=color.new(color.blue, 40), text_color=color.white)
    table.cell(allSignalsTable, 5, 0, "1h", bgcolor=color.new(color.blue, 40), text_color=color.white)
    table.cell(allSignalsTable, 6, 0, "4h", bgcolor=color.new(color.blue, 40), text_color=color.white)
    // Trending
    table.cell(allSignalsTable, 0, 1, "Trending", bgcolor=color.new(color.gray, 40), text_color=color.white)
    table.cell(allSignalsTable, 1, 1, "SMA", bgcolor=color.new(color.gray, 40), text_color=color.white)
    table.cell(allSignalsTable, 2, 1, str.tostring(sma_current), bgcolor=f_col(sma_current), text_color=color.white)
    table.cell(allSignalsTable, 3, 1, str.tostring(sma_5m), bgcolor=f_col(sma_5m), text_color=color.white)
    table.cell(allSignalsTable, 4, 1, str.tostring(sma_30m), bgcolor=f_col(sma_30m), text_color=color.white)
    table.cell(allSignalsTable, 5, 1, str.tostring(sma_1h), bgcolor=f_col(sma_1h), text_color=color.white)
    table.cell(allSignalsTable, 6, 1, str.tostring(sma_4h), bgcolor=f_col(sma_4h), text_color=color.white)
    table.cell(allSignalsTable, 0, 2, "Trending", bgcolor=color.new(color.gray, 40), text_color=color.white)
    table.cell(allSignalsTable, 1, 2, "EMA", bgcolor=color.new(color.gray, 40), text_color=color.white)
    table.cell(allSignalsTable, 2, 2, str.tostring(ema_current), bgcolor=f_col(ema_current), text_color=color.white)
    table.cell(allSignalsTable, 3, 2, str.tostring(ema_5m), bgcolor=f_col(ema_5m), text_color=color.white)
    table.cell(allSignalsTable, 4, 2, str.tostring(ema_30m), bgcolor=f_col(ema_30m), text_color=color.white)
    table.cell(allSignalsTable, 5, 2, str.tostring(ema_1h), bgcolor=f_col(ema_1h), text_color=color.white)
    table.cell(allSignalsTable, 6, 2, str.tostring(ema_4h), bgcolor=f_col(ema_4h), text_color=color.white)
    table.cell(allSignalsTable, 0, 3, "Trending", bgcolor=color.new(color.gray, 40), text_color=color.white)
    table.cell(allSignalsTable, 1, 3, "MACD", bgcolor=color.new(color.gray, 40), text_color=color.white)
    table.cell(allSignalsTable, 2, 3, str.tostring(macd_current), bgcolor=f_col(macd_current), text_color=color.white)
    table.cell(allSignalsTable, 3, 3, str.tostring(macd_5m), bgcolor=f_col(macd_5m), text_color=color.white)
    table.cell(allSignalsTable, 4, 3, str.tostring(macd_30m), bgcolor=f_col(macd_30m), text_color=color.white)
    table.cell(allSignalsTable, 5, 3, str.tostring(macd_1h), bgcolor=f_col(macd_1h), text_color=color.white)
    table.cell(allSignalsTable, 6, 3, str.tostring(macd_4h), bgcolor=f_col(macd_4h), text_color=color.white)
    table.cell(allSignalsTable, 0, 4, "Trending", bgcolor=color.new(color.gray, 40), text_color=color.white)
    table.cell(allSignalsTable, 1, 4, "ADX", bgcolor=color.new(color.gray, 40), text_color=color.white)
    table.cell(allSignalsTable, 2, 4, str.tostring(adx_current), bgcolor=f_col(adx_current), text_color=color.white)
    table.cell(allSignalsTable, 3, 4, str.tostring(adx_5m), bgcolor=f_col(adx_5m), text_color=color.white)
    table.cell(allSignalsTable, 4, 4, str.tostring(adx_30m), bgcolor=f_col(adx_30m), text_color=color.white)
    table.cell(allSignalsTable, 5, 4, str.tostring(adx_1h), bgcolor=f_col(adx_1h), text_color=color.white)
    table.cell(allSignalsTable, 6, 4, str.tostring(adx_4h), bgcolor=f_col(adx_4h), text_color=color.white)
    table.cell(allSignalsTable, 0, 5, "Trending", bgcolor=color.new(color.gray, 40), text_color=color.white)
    table.cell(allSignalsTable, 1, 5, "PSAR", bgcolor=color.new(color.gray, 40), text_color=color.white)
    table.cell(allSignalsTable, 2, 5, str.tostring(psar_current), bgcolor=f_col(psar_current), text_color=color.white)
    table.cell(allSignalsTable, 3, 5, str.tostring(psar_5m), bgcolor=f_col(psar_5m), text_color=color.white)
    table.cell(allSignalsTable, 4, 5, str.tostring(psar_30m), bgcolor=f_col(psar_30m), text_color=color.white)
    table.cell(allSignalsTable, 5, 5, str.tostring(psar_1h), bgcolor=f_col(psar_1h), text_color=color.white)
    table.cell(allSignalsTable, 6, 5, str.tostring(psar_4h), bgcolor=f_col(psar_4h), text_color=color.white)
    table.cell(allSignalsTable, 0, 6, "Volatility", bgcolor=color.new(color.gray, 40), text_color=color.white)
    table.cell(allSignalsTable, 1, 6, "Bollinger Bands", bgcolor=color.new(color.gray, 40), text_color=color.white)
    table.cell(allSignalsTable, 2, 6, str.tostring(bb_current), bgcolor=f_col(bb_current), text_color=color.white)
    table.cell(allSignalsTable, 3, 6, str.tostring(bb_5m), bgcolor=f_col(bb_5m), text_color=color.white)
    table.cell(allSignalsTable, 4, 6, str.tostring(bb_30m), bgcolor=f_col(bb_30m), text_color=color.white)
    table.cell(allSignalsTable, 5, 6, str.tostring(bb_1h), bgcolor=f_col(bb_1h), text_color=color.white)
    table.cell(allSignalsTable, 6, 6, str.tostring(bb_4h), bgcolor=f_col(bb_4h), text_color=color.white)
    table.cell(allSignalsTable, 0, 7, "Volatility", bgcolor=color.new(color.gray, 40), text_color=color.white)
    table.cell(allSignalsTable, 1, 7, "ATR", bgcolor=color.new(color.gray, 40), text_color=color.white)
    table.cell(allSignalsTable, 2, 7, str.tostring(atr_current), bgcolor=f_col(atr_current), text_color=color.white)
    table.cell(allSignalsTable, 3, 7, str.tostring(atr_5m), bgcolor=f_col(atr_5m), text_color=color.white)
    table.cell(allSignalsTable, 4, 7, str.tostring(atr_30m), bgcolor=f_col(atr_30m), text_color=color.white)
    table.cell(allSignalsTable, 5, 7, str.tostring(atr_1h), bgcolor=f_col(atr_1h), text_color=color.white)
    table.cell(allSignalsTable, 6, 7, str.tostring(atr_4h), bgcolor=f_col(atr_4h), text_color=color.white)
    table.cell(allSignalsTable, 0, 8, "Volatility", bgcolor=color.new(color.gray, 40), text_color=color.white)
    table.cell(allSignalsTable, 1, 8, "Keltner Channel", bgcolor=color.new(color.gray, 40), text_color=color.white)
    table.cell(allSignalsTable, 2, 8, str.tostring(kc_current), bgcolor=f_col(kc_current), text_color=color.white)
    table.cell(allSignalsTable, 3, 8, str.tostring(kc_5m), bgcolor=f_col(kc_5m), text_color=color.white)
    table.cell(allSignalsTable, 4, 8, str.tostring(kc_30m), bgcolor=f_col(kc_30m), text_color=color.white)
    table.cell(allSignalsTable, 5, 8, str.tostring(kc_1h), bgcolor=f_col(kc_1h), text_color=color.white)
    table.cell(allSignalsTable, 6, 8, str.tostring(kc_4h), bgcolor=f_col(kc_4h), text_color=color.white)
    table.cell(allSignalsTable, 0, 9, "Volatility", bgcolor=color.new(color.gray, 40), text_color=color.white)
    table.cell(allSignalsTable, 1, 9, "Std Dev", bgcolor=color.new(color.gray, 40), text_color=color.white)
    table.cell(allSignalsTable, 2, 9, str.tostring(std_current), bgcolor=f_col(std_current), text_color=color.white)
    table.cell(allSignalsTable, 3, 9, str.tostring(std_5m), bgcolor=f_col(std_5m), text_color=color.white)
    table.cell(allSignalsTable, 4, 9, str.tostring(std_30m), bgcolor=f_col(std_30m), text_color=color.white)
    table.cell(allSignalsTable, 5, 9, str.tostring(std_1h), bgcolor=f_col(std_1h), text_color=color.white)
    table.cell(allSignalsTable, 6, 9, str.tostring(std_4h), bgcolor=f_col(std_4h), text_color=color.white)
    table.cell(allSignalsTable, 0, 10, "Volatility", bgcolor=color.new(color.gray, 40), text_color=color.white)
    table.cell(allSignalsTable, 1, 10, "Chaikin Vol", bgcolor=color.new(color.gray, 40), text_color=color.white)
    table.cell(allSignalsTable, 2, 10, str.tostring(chaikin_current), bgcolor=f_col(chaikin_current), text_color=color.white)
    table.cell(allSignalsTable, 3, 10, str.tostring(chaikin_5m), bgcolor=f_col(chaikin_5m), text_color=color.white)
    table.cell(allSignalsTable, 4, 10, str.tostring(chaikin_30m), bgcolor=f_col(chaikin_30m), text_color=color.white)
    table.cell(allSignalsTable, 5, 10, str.tostring(chaikin_1h), bgcolor=f_col(chaikin_1h), text_color=color.white)
    table.cell(allSignalsTable, 6, 10, str.tostring(chaikin_4h), bgcolor=f_col(chaikin_4h), text_color=color.white)
    table.cell(allSignalsTable, 0, 11, "Momentum", bgcolor=color.new(color.gray, 40), text_color=color.white)
    table.cell(allSignalsTable, 1, 11, "RSI", bgcolor=color.new(color.gray, 40), text_color=color.white)
    table.cell(allSignalsTable, 2, 11, str.tostring(rsi_current), bgcolor=f_col(rsi_current), text_color=color.white)
    table.cell(allSignalsTable, 3, 11, str.tostring(rsi_5m), bgcolor=f_col(rsi_5m), text_color=color.white)
    table.cell(allSignalsTable, 4, 11, str.tostring(rsi_30m), bgcolor=f_col(rsi_30m), text_color=color.white)
    table.cell(allSignalsTable, 5, 11, str.tostring(rsi_1h), bgcolor=f_col(rsi_1h), text_color=color.white)
    table.cell(allSignalsTable, 6, 11, str.tostring(rsi_4h), bgcolor=f_col(rsi_4h), text_color=color.white)
    table.cell(allSignalsTable, 0, 12, "Momentum", bgcolor=color.new(color.gray, 40), text_color=color.white)
    table.cell(allSignalsTable, 1, 12, "Stochastic", bgcolor=color.new(color.gray, 40), text_color=color.white)
    table.cell(allSignalsTable, 2, 12, str.tostring(stoch_current), bgcolor=f_col(stoch_current), text_color=color.white)
    table.cell(allSignalsTable, 3, 12, str.tostring(stoch_5m), bgcolor=f_col(stoch_5m), text_color=color.white)
    table.cell(allSignalsTable, 4, 12, str.tostring(stoch_30m), bgcolor=f_col(stoch_30m), text_color=color.white)
    table.cell(allSignalsTable, 5, 12, str.tostring(stoch_1h), bgcolor=f_col(stoch_1h), text_color=color.white)
    table.cell(allSignalsTable, 6, 12, str.tostring(stoch_4h), bgcolor=f_col(stoch_4h), text_color=color.white)
    table.cell(allSignalsTable, 0, 13, "Momentum", bgcolor=color.new(color.gray, 40), text_color=color.white)
    table.cell(allSignalsTable, 1, 13, "CCI", bgcolor=color.new(color.gray, 40), text_color=color.white)
    table.cell(allSignalsTable, 2, 13, str.tostring(cci_current), bgcolor=f_col(cci_current), text_color=color.white)
    table.cell(allSignalsTable, 3, 13, str.tostring(cci_5m), bgcolor=f_col(cci_5m), text_color=color.white)
    table.cell(allSignalsTable, 4, 13, str.tostring(cci_30m), bgcolor=f_col(cci_30m), text_color=color.white)
    table.cell(allSignalsTable, 5, 13, str.tostring(cci_1h), bgcolor=f_col(cci_1h), text_color=color.white)
    table.cell(allSignalsTable, 6, 13, str.tostring(cci_4h), bgcolor=f_col(cci_4h), text_color=color.white)
    table.cell(allSignalsTable, 0, 14, "Momentum", bgcolor=color.new(color.gray, 40), text_color=color.white)
    table.cell(allSignalsTable, 1, 14, "Williams %R", bgcolor=color.new(color.gray, 40), text_color=color.white)
    table.cell(allSignalsTable, 2, 14, str.tostring(williams_current), bgcolor=f_col(williams_current), text_color=color.white)
    table.cell(allSignalsTable, 3, 14, str.tostring(williams_5m), bgcolor=f_col(williams_5m), text_color=color.white)
    table.cell(allSignalsTable, 4, 14, str.tostring(williams_30m), bgcolor=f_col(williams_30m), text_color=color.white)
    table.cell(allSignalsTable, 5, 14, str.tostring(williams_1h), bgcolor=f_col(williams_1h), text_color=color.white)
    table.cell(allSignalsTable, 6, 14, str.tostring(williams_4h), bgcolor=f_col(williams_4h), text_color=color.white)
    table.cell(allSignalsTable, 0, 15, "Momentum", bgcolor=color.new(color.gray, 40), text_color=color.white)
    table.cell(allSignalsTable, 1, 15, "MACD Hist", bgcolor=color.new(color.gray, 40), text_color=color.white)
    table.cell(allSignalsTable, 2, 15, str.tostring(macd_hist_current), bgcolor=f_col(macd_hist_current), text_color=color.white)
    table.cell(allSignalsTable, 3, 15, str.tostring(macd_hist_5m), bgcolor=f_col(macd_hist_5m), text_color=color.white)
    table.cell(allSignalsTable, 4, 15, str.tostring(macd_hist_30m), bgcolor=f_col(macd_hist_30m), text_color=color.white)
    table.cell(allSignalsTable, 5, 15, str.tostring(macd_hist_1h), bgcolor=f_col(macd_hist_1h), text_color=color.white)
    table.cell(allSignalsTable, 6, 15, str.tostring(macd_hist_4h), bgcolor=f_col(macd_hist_4h), text_color=color.white)
    table.cell(allSignalsTable, 0, 16, "Volume", bgcolor=color.new(color.gray, 40), text_color=color.white)
    table.cell(allSignalsTable, 1, 16, "OBV", bgcolor=color.new(color.gray, 40), text_color=color.white)
    table.cell(allSignalsTable, 2, 16, str.tostring(obv_current), bgcolor=f_col(obv_current), text_color=color.white)
    table.cell(allSignalsTable, 3, 16, str.tostring(obv_5m), bgcolor=f_col(obv_5m), text_color=color.white)
    table.cell(allSignalsTable, 4, 16, str.tostring(obv_30m), bgcolor=f_col(obv_30m), text_color=color.white)
    table.cell(allSignalsTable, 5, 16, str.tostring(obv_1h), bgcolor=f_col(obv_1h), text_color=color.white)
    table.cell(allSignalsTable, 6, 16, str.tostring(obv_4h), bgcolor=f_col(obv_4h), text_color=color.white)
    table.cell(allSignalsTable, 0, 17, "Volume", bgcolor=color.new(color.gray, 40), text_color=color.white)
    table.cell(allSignalsTable, 1, 17, "MFI", bgcolor=color.new(color.gray, 40), text_color=color.white)
    table.cell(allSignalsTable, 2, 17, str.tostring(mfi_current), bgcolor=f_col(mfi_current), text_color=color.white)
    table.cell(allSignalsTable, 3, 17, str.tostring(mfi_5m), bgcolor=f_col(mfi_5m), text_color=color.white)
    table.cell(allSignalsTable, 4, 17, str.tostring(mfi_30m), bgcolor=f_col(mfi_30m), text_color=color.white)
    table.cell(allSignalsTable, 5, 17, str.tostring(mfi_1h), bgcolor=f_col(mfi_1h), text_color=color.white)
    table.cell(allSignalsTable, 6, 17, str.tostring(mfi_4h), bgcolor=f_col(mfi_4h), text_color=color.white)
    table.cell(allSignalsTable, 0, 18, "Volume", bgcolor=color.new(color.gray, 40), text_color=color.white)
    table.cell(allSignalsTable, 1, 18, "CMF", bgcolor=color.new(color.gray, 40), text_color=color.white)
    table.cell(allSignalsTable, 2, 18, str.tostring(cmf_current), bgcolor=f_col(cmf_current), text_color=color.white)
    table.cell(allSignalsTable, 3, 18, str.tostring(cmf_5m), bgcolor=f_col(cmf_5m), text_color=color.white)
    table.cell(allSignalsTable, 4, 18, str.tostring(cmf_30m), bgcolor=f_col(cmf_30m), text_color=color.white)
    table.cell(allSignalsTable, 5, 18, str.tostring(cmf_1h), bgcolor=f_col(cmf_1h), text_color=color.white)
    table.cell(allSignalsTable, 6, 18, str.tostring(cmf_4h), bgcolor=f_col(cmf_4h), text_color=color.white)
    table.cell(allSignalsTable, 0, 19, "Volume", bgcolor=color.new(color.gray, 40), text_color=color.white)
    table.cell(allSignalsTable, 1, 19, "Volume Osc", bgcolor=color.new(color.gray, 40), text_color=color.white)
    table.cell(allSignalsTable, 2, 19, str.tostring(vo_current), bgcolor=f_col(vo_current), text_color=color.white)
    table.cell(allSignalsTable, 3, 19, str.tostring(vo_5m), bgcolor=f_col(vo_5m), text_color=color.white)
    table.cell(allSignalsTable, 4, 19, str.tostring(vo_30m), bgcolor=f_col(vo_30m), text_color=color.white)
    table.cell(allSignalsTable, 5, 19, str.tostring(vo_1h), bgcolor=f_col(vo_1h), text_color=color.white)
    table.cell(allSignalsTable, 6, 19, str.tostring(vo_4h), bgcolor=f_col(vo_4h), text_color=color.white)
    table.cell(allSignalsTable, 0, 20, "Volume", bgcolor=color.new(color.gray, 40), text_color=color.white)
    table.cell(allSignalsTable, 1, 20, "A/D Line", bgcolor=color.new(color.gray, 40), text_color=color.white)
    table.cell(allSignalsTable, 2, 20, str.tostring(ad_current), bgcolor=f_col(ad_current), text_color=color.white)
    table.cell(allSignalsTable, 3, 20, str.tostring(ad_5m), bgcolor=f_col(ad_5m), text_color=color.white)
    table.cell(allSignalsTable, 4, 20, str.tostring(ad_30m), bgcolor=f_col(ad_30m), text_color=color.white)
    table.cell(allSignalsTable, 5, 20, str.tostring(ad_1h), bgcolor=f_col(ad_1h), text_color=color.white)
    table.cell(allSignalsTable, 6, 20, str.tostring(ad_4h), bgcolor=f_col(ad_4h), text_color=color.white) 