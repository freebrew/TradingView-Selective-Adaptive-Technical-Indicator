//@version=5
strategy("Four Dropdown Technical Indicator Strategy", overlay=true, max_lines_count=500, max_labels_count=500, max_boxes_count=500)

// ====== PRESET SELECTION ======
presetGroup = "Strategy Presets"
preset = input.string("Default", "Strategy Preset", options=["Default", "Optimal Performance", "Breakout", "Reversal", "Trend Dominator"], tooltip="Select a pre-configured set of optimized parameters", group=presetGroup)

// ====== INDICATOR SELECTION DROPDOWNS ======

// === Trending Indicators Settings ===
trendingGroup = "Trending Indicator Settings"
trendingType = input.string("MACD", "Trending Indicator", options=["SMA", "EMA", "MACD", "ADX", "PSAR"], group=trendingGroup)

// === Volatility Indicators Settings ===
volatilityGroup = "Volatility Indicator Settings"
volatilityType = input.string("Bollinger Bands", "Volatility Indicator", options=["Bollinger Bands", "ATR", "Keltner Channel", "Standard Deviation", "Chaikin Volatility"], group=volatilityGroup)

// === Momentum Indicators Settings ===
momentumGroup = "Momentum Indicator Settings"
momentumType = input.string("RSI", "Momentum Indicator", options=["RSI", "Stochastic", "CCI", "Williams %R", "MACD Histogram"], group=momentumGroup)

// === Volume Indicators Settings ===
volumeGroup = "Volume Indicator Settings"
volumeType = input.string("OBV", "Volume Indicator", options=["OBV", "MFI", "Chaikin Money Flow", "Volume Oscillator", "A/D Line"], group=volumeGroup)

// ====== PRESET PARAMETERS FOR ALL 5 STRATEGIES ======
// Default Preset
trendsLength_default = 14
trendsFast_default = 12
trendsSlow_default = 26
trendsSignal_default = 9
volLength_default = 20
volMultiplier_default = 2.0
momLength_default = 14
momOverBought_default = 70
momOverSold_default = 30
volPeriod_default = 14

// Optimal Performance Preset
trendsLength_optimal = 14
trendsFast_optimal = 12
trendsSlow_optimal = 26
trendsSignal_optimal = 9
volLength_optimal = 20
volMultiplier_optimal = 2.0
momLength_optimal = 14
momOverBought_optimal = 70
momOverSold_optimal = 30
volPeriod_optimal = 14

// Breakout Preset
trendsLength_breakout = 14
trendsFast_breakout = 8
trendsSlow_breakout = 21
trendsSignal_breakout = 7
volLength_breakout = 15
volMultiplier_breakout = 2.5
momLength_breakout = 10
momOverBought_breakout = 65
momOverSold_breakout = 35
volPeriod_breakout = 10

// Reversal Preset
trendsLength_reversal = 14
trendsFast_reversal = 6
trendsSlow_reversal = 19
trendsSignal_reversal = 5
volLength_reversal = 25
volMultiplier_reversal = 1.8
momLength_reversal = 16
momOverBought_reversal = 75
momOverSold_reversal = 25
volPeriod_reversal = 16

// Trend Dominator Preset
trendsLength_trend = 14
trendsFast_trend = 15
trendsSlow_trend = 30
trendsSignal_trend = 10
volLength_trend = 30
volMultiplier_trend = 2.2
momLength_trend = 12
momOverBought_trend = 68
momOverSold_trend = 32
volPeriod_trend = 12

// Set active parameters based on selected preset (for current strategy)
trendsLength = trendsLength_default
trendsFast = preset == "Optimal Performance" ? trendsFast_optimal : preset == "Breakout" ? trendsFast_breakout : preset == "Reversal" ? trendsFast_reversal : preset == "Trend Dominator" ? trendsFast_trend : trendsFast_default
trendsSlow = preset == "Optimal Performance" ? trendsSlow_optimal : preset == "Breakout" ? trendsSlow_breakout : preset == "Reversal" ? trendsSlow_reversal : preset == "Trend Dominator" ? trendsSlow_trend : trendsSlow_default
trendsSignal = preset == "Optimal Performance" ? trendsSignal_optimal : preset == "Breakout" ? trendsSignal_breakout : preset == "Reversal" ? trendsSignal_reversal : preset == "Trend Dominator" ? trendsSignal_trend : trendsSignal_default

volLength = preset == "Optimal Performance" ? volLength_optimal : preset == "Breakout" ? volLength_breakout : preset == "Reversal" ? volLength_reversal : preset == "Trend Dominator" ? volLength_trend : volLength_default
volMultiplier = preset == "Optimal Performance" ? volMultiplier_optimal : preset == "Breakout" ? volMultiplier_breakout : preset == "Reversal" ? volMultiplier_reversal : preset == "Trend Dominator" ? volMultiplier_trend : volMultiplier_default

momLength = preset == "Optimal Performance" ? momLength_optimal : preset == "Breakout" ? momLength_breakout : preset == "Reversal" ? momLength_reversal : preset == "Trend Dominator" ? momLength_trend : momLength_default
momOverBought = preset == "Optimal Performance" ? momOverBought_optimal : preset == "Breakout" ? momOverBought_breakout : preset == "Reversal" ? momOverBought_reversal : preset == "Trend Dominator" ? momOverBought_trend : momOverBought_default
momOverSold = preset == "Optimal Performance" ? momOverSold_optimal : preset == "Breakout" ? momOverSold_breakout : preset == "Reversal" ? momOverSold_reversal : preset == "Trend Dominator" ? momOverSold_trend : momOverSold_default

volPeriod = preset == "Optimal Performance" ? volPeriod_optimal : preset == "Breakout" ? volPeriod_breakout : preset == "Reversal" ? volPeriod_reversal : preset == "Trend Dominator" ? volPeriod_trend : volPeriod_default

// === Signal Combination Settings ===
signalGroup = "Signal Combination"
signalStrategy = input.string("Majority Vote", "Signal Combination Strategy", options=["All Agree", "Majority Vote", "Custom Threshold"], group=signalGroup)
customThreshold = input.int(2, "Custom Threshold (1-4)", minval=1, maxval=4, tooltip="Number of indicators required to agree for a signal (only used with Custom Threshold selection)", group=signalGroup)

// ====== CACHED MULTI-TIMEFRAME DATA ======
// Fetch raw OHLCV data for each timeframe ONCE (only 4 security requests total)
[o_5m, h_5m, l_5m, c_5m, v_5m] = request.security(syminfo.tickerid, "5", [open, high, low, close, volume])
[o_30m, h_30m, l_30m, c_30m, v_30m] = request.security(syminfo.tickerid, "30", [open, high, low, close, volume])
[o_1h, h_1h, l_1h, c_1h, v_1h] = request.security(syminfo.tickerid, "60", [open, high, low, close, volume])
[o_4h, h_4h, l_4h, c_4h, v_4h] = request.security(syminfo.tickerid, "240", [open, high, low, close, volume])

// ====== PRESET-SPECIFIC CALCULATION FUNCTION ======
f_calculate_preset_signals(o, h, l, c, v, tl, tf, ts, tsig, vl, vm, ml, mob, mos, vp) =>
    // Trending Indicators
    sma_val = ta.sma(c, tl)
    sma_sig = c > sma_val ? 1 : c < sma_val ? -1 : 0
    
    ema_val = ta.ema(c, tl)
    ema_sig = c > ema_val ? 1 : c < ema_val ? -1 : 0
    
    [macd_l, macd_s, macd_h] = ta.macd(c, tf, ts, tsig)
    macd_sig = macd_l > macd_s ? 1 : macd_l < macd_s ? -1 : 0
    
    [plusDI_val, minusDI_val, adx_val] = ta.dmi(tl, tl)
    adx_sig = adx_val > 25 and plusDI_val > minusDI_val ? 1 : adx_val > 25 and plusDI_val < minusDI_val ? -1 : 0
    
    psar_val = ta.sar(0.02, 0.02, 0.2)
    psar_sig = c > psar_val ? 1 : c < psar_val ? -1 : 0
    
    // Volatility Indicators
    bbMiddle_val = ta.sma(c, vl)
    bbUpper_val = bbMiddle_val + ta.stdev(c, vl) * vm
    bbLower_val = bbMiddle_val - ta.stdev(c, vl) * vm
    bb_sig = c > bbUpper_val ? 1 : c < bbLower_val ? -1 : 0
    
    atr_val = ta.atr(vl)
    atr_sig = c > c[1] + atr_val ? 1 : c < c[1] - atr_val ? -1 : 0
    
    kc_middle_val = ta.ema(c, vl)
    kc_upper_val = kc_middle_val + ta.atr(vl) * vm
    kc_lower_val = kc_middle_val - ta.atr(vl) * vm
    kc_sig = c > kc_upper_val ? 1 : c < kc_lower_val ? -1 : 0
    
    std_dev_val = ta.stdev(c, vl)
    std_sig = std_dev_val > ta.sma(std_dev_val, vl) ? 1 : std_dev_val < ta.sma(std_dev_val, vl) ? -1 : 0
    
    chaikinVol_val = ta.change(ta.ema(h - l, vl), vl)
    chaikin_sig = chaikinVol_val > 0 ? 1 : chaikinVol_val < 0 ? -1 : 0
    
    // Momentum Indicators
    rsi_val = ta.rsi(c, ml)
    rsi_sig = rsi_val < mos ? 1 : rsi_val > mob ? -1 : 0
    
    stoch_k_val = ta.stoch(c, h, l, ml)
    stoch_d_val = ta.sma(stoch_k_val, 3)
    stoch_sig = stoch_k_val < mos and stoch_k_val > stoch_d_val ? 1 : stoch_k_val > mob and stoch_k_val < stoch_d_val ? -1 : 0
    
    cci_val = ta.cci(c, ml)
    cci_sig = cci_val < -100 ? 1 : cci_val > 100 ? -1 : 0
    
    williams_r_val = ta.wpr(ml)
    williams_sig = williams_r_val < -80 ? 1 : williams_r_val > -20 ? -1 : 0
    
    [_, _, macd_hist_val] = ta.macd(c, tf, ts, tsig)
    macd_hist_sig = macd_hist_val > 0 and macd_hist_val > macd_hist_val[1] ? 1 : macd_hist_val < 0 and macd_hist_val < macd_hist_val[1] ? -1 : 0
    
    // Volume Indicators
    obv_val = ta.obv
    obv_sig = obv_val > ta.sma(obv_val, vp) ? 1 : obv_val < ta.sma(obv_val, vp) ? -1 : 0
    
    mfi_val = ta.mfi((h + l + c) / 3, vp)
    mfi_sig = mfi_val < 20 ? 1 : mfi_val > 80 ? -1 : 0
    
    moneyFlowMultiplier_val = ((c - l) - (h - c)) / (h - l)
    moneyFlowVolume_val = moneyFlowMultiplier_val * v
    cmf_val = ta.sma(moneyFlowVolume_val, vp) / ta.sma(v, vp)
    cmf_sig = cmf_val > 0.05 ? 1 : cmf_val < -0.05 ? -1 : 0
    
    volume_ema_fast_val = ta.ema(v, 12)
    volume_ema_slow_val = ta.ema(v, 26)
    vo_val = 100 * (volume_ema_fast_val - volume_ema_slow_val) / volume_ema_slow_val
    vo_sig = vo_val > 0 ? 1 : vo_val < 0 ? -1 : 0
    
    ad_val = ta.accdist
    ad_sig = ad_val > ta.sma(ad_val, vp) ? 1 : ad_val < ta.sma(ad_val, vp) ? -1 : 0
    
    // Group signals based on dropdown selections
    trending_group = trendingType == "SMA" ? sma_sig : trendingType == "EMA" ? ema_sig : trendingType == "MACD" ? macd_sig : trendingType == "ADX" ? adx_sig : psar_sig
    volatility_group = volatilityType == "Bollinger Bands" ? bb_sig : volatilityType == "ATR" ? atr_sig : volatilityType == "Keltner Channel" ? kc_sig : volatilityType == "Standard Deviation" ? std_sig : chaikin_sig
    momentum_group = momentumType == "RSI" ? rsi_sig : momentumType == "Stochastic" ? stoch_sig : momentumType == "CCI" ? cci_sig : momentumType == "Williams %R" ? williams_sig : macd_hist_sig
    volume_group = volumeType == "OBV" ? obv_sig : volumeType == "MFI" ? mfi_sig : volumeType == "Chaikin Money Flow" ? cmf_sig : volumeType == "Volume Oscillator" ? vo_sig : ad_sig
    
    [sma_sig, ema_sig, macd_sig, adx_sig, psar_sig, bb_sig, atr_sig, kc_sig, std_sig, chaikin_sig, rsi_sig, stoch_sig, cci_sig, williams_sig, macd_hist_sig, obv_sig, mfi_sig, cmf_sig, vo_sig, ad_sig, trending_group, volatility_group, momentum_group, volume_group]

// ====== MULTI-TIMEFRAME INDICATOR CALCULATION FUNCTION ======
f_calculate_all_signals(o, h, l, c, v) =>
    f_calculate_preset_signals(o, h, l, c, v, trendsLength, trendsFast, trendsSlow, trendsSignal, volLength, volMultiplier, momLength, momOverBought, momOverSold, volPeriod)

// Calculate all signals for current timeframe using cached data
[sma_current, ema_current, macd_current, adx_current, psar_current, bb_current, atr_current, kc_current, std_current, chaikin_current, rsi_current, stoch_current, cci_current, williams_current, macd_hist_current, obv_current, mfi_current, cmf_current, vo_current, ad_current, trending_signal, volatility_signal, momentum_signal, volume_signal] = f_calculate_all_signals(open, high, low, close, volume)

// ====== CALCULATE ALL 5 PRESET STRATEGIES ======
// Default Preset Strategy
[_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, trending_default, volatility_default, momentum_default, volume_default] = f_calculate_preset_signals(open, high, low, close, volume, trendsLength_default, trendsFast_default, trendsSlow_default, trendsSignal_default, volLength_default, volMultiplier_default, momLength_default, momOverBought_default, momOverSold_default, volPeriod_default)

// Optimal Performance Preset Strategy
[_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, trending_optimal, volatility_optimal, momentum_optimal, volume_optimal] = f_calculate_preset_signals(open, high, low, close, volume, trendsLength_optimal, trendsFast_optimal, trendsSlow_optimal, trendsSignal_optimal, volLength_optimal, volMultiplier_optimal, momLength_optimal, momOverBought_optimal, momOverSold_optimal, volPeriod_optimal)

// Breakout Preset Strategy
[_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, trending_breakout, volatility_breakout, momentum_breakout, volume_breakout] = f_calculate_preset_signals(open, high, low, close, volume, trendsLength_breakout, trendsFast_breakout, trendsSlow_breakout, trendsSignal_breakout, volLength_breakout, volMultiplier_breakout, momLength_breakout, momOverBought_breakout, momOverSold_breakout, volPeriod_breakout)

// Reversal Preset Strategy
[_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, trending_reversal, volatility_reversal, momentum_reversal, volume_reversal] = f_calculate_preset_signals(open, high, low, close, volume, trendsLength_reversal, trendsFast_reversal, trendsSlow_reversal, trendsSignal_reversal, volLength_reversal, volMultiplier_reversal, momLength_reversal, momOverBought_reversal, momOverSold_reversal, volPeriod_reversal)

// Trend Dominator Preset Strategy
[_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, trending_trend, volatility_trend, momentum_trend, volume_trend] = f_calculate_preset_signals(open, high, low, close, volume, trendsLength_trend, trendsFast_trend, trendsSlow_trend, trendsSignal_trend, volLength_trend, volMultiplier_trend, momLength_trend, momOverBought_trend, momOverSold_trend, volPeriod_trend)

// ====== CALCULATE FINAL SIGNALS FOR ALL PRESETS ======
f_calculate_final_signal(t_sig, v_sig, m_sig, vol_sig) =>
    pos_signals = (t_sig == 1 ? 1 : 0) + (v_sig == 1 ? 1 : 0) + (m_sig == 1 ? 1 : 0) + (vol_sig == 1 ? 1 : 0)
    neg_signals = (t_sig == -1 ? 1 : 0) + (v_sig == -1 ? 1 : 0) + (m_sig == -1 ? 1 : 0) + (vol_sig == -1 ? 1 : 0)
    
    final_sig = if signalStrategy == "All Agree"
        pos_signals >= 4 ? 1 : neg_signals >= 4 ? -1 : 0
    else if signalStrategy == "Majority Vote"
        pos_signals >= 2 and pos_signals > neg_signals ? 1 : neg_signals >= 2 and neg_signals > pos_signals ? -1 : 0
    else // Custom Threshold
        pos_signals >= customThreshold ? 1 : neg_signals >= customThreshold ? -1 : 0
    final_sig

// Calculate final signals for all presets
final_signal_default = f_calculate_final_signal(trending_default, volatility_default, momentum_default, volume_default)
final_signal_optimal = f_calculate_final_signal(trending_optimal, volatility_optimal, momentum_optimal, volume_optimal)
final_signal_breakout = f_calculate_final_signal(trending_breakout, volatility_breakout, momentum_breakout, volume_breakout)
final_signal_reversal = f_calculate_final_signal(trending_reversal, volatility_reversal, momentum_reversal, volume_reversal)
final_signal_trend = f_calculate_final_signal(trending_trend, volatility_trend, momentum_trend, volume_trend)

// ====== SIGNAL COMBINATION STRATEGY ======

// Count positive and negative signals
positive_signals = (trending_signal == 1 ? 1 : 0) + (volatility_signal == 1 ? 1 : 0) + (momentum_signal == 1 ? 1 : 0) + (volume_signal == 1 ? 1 : 0)
negative_signals = (trending_signal == -1 ? 1 : 0) + (volatility_signal == -1 ? 1 : 0) + (momentum_signal == -1 ? 1 : 0) + (volume_signal == -1 ? 1 : 0)

// Determine final signal based on the combination strategy
final_signal = if signalStrategy == "All Agree"
    positive_signals >= 4 ? 1 : negative_signals >= 4 ? -1 : 0
else if signalStrategy == "Majority Vote"
    positive_signals >= 2 and positive_signals > negative_signals ? 1 : negative_signals >= 2 and negative_signals > positive_signals ? -1 : 0
else // Custom Threshold
    positive_signals >= customThreshold ? 1 : negative_signals >= customThreshold ? -1 : 0

// Track last signal info
var string lastSignalAction = "None"
if final_signal == 1 and final_signal[1] != 1
    lastSignalAction := "Buy Signal"
else if final_signal == -1 and final_signal[1] != -1
    lastSignalAction := "Sell Signal"

// ====== STRATEGY ENTRIES/EXITS FOR ALL 5 PRESETS ======
// Only the selected preset actually trades, others are for performance comparison
active_signal = preset == "Default" ? final_signal_default : preset == "Optimal Performance" ? final_signal_optimal : preset == "Breakout" ? final_signal_breakout : preset == "Reversal" ? final_signal_reversal : final_signal_trend

if active_signal == 1 and active_signal[1] != 1
    strategy.entry("Long", strategy.long)
if active_signal == -1 and active_signal[1] != -1
    strategy.entry("Short", strategy.short)
// Optional: close on opposite signal
if active_signal == -1 and active_signal[1] == 1
    strategy.close("Long")
if active_signal == 1 and active_signal[1] == -1
    strategy.close("Short")

// Track signals for all presets (for display purposes)
final_signal := active_signal

// ====== DEBUG SIGNALS TABLE ======
var table debugTable = table.new(position.top_left, 3, 6, border_width=1, bgcolor=color.new(color.black, 80))

if barstate.islast
    table.cell(debugTable, 0, 0, "Signal Debug", bgcolor=color.new(color.blue, 40), text_color=color.white)
    table.cell(debugTable, 1, 0, "Current", bgcolor=color.new(color.blue, 40), text_color=color.white)
    table.cell(debugTable, 2, 0, "Active", bgcolor=color.new(color.blue, 40), text_color=color.white)
    
    table.cell(debugTable, 0, 1, "Trending", bgcolor=color.new(color.gray, 40), text_color=color.white)
    table.cell(debugTable, 1, 1, str.tostring(trending_signal), bgcolor=color.new(trending_signal == 1 ? color.green : trending_signal == -1 ? color.red : color.gray, 40), text_color=color.white)
    table.cell(debugTable, 2, 1, str.tostring(trending_default), bgcolor=color.new(trending_default == 1 ? color.green : trending_default == -1 ? color.red : color.gray, 40), text_color=color.white)
    
    table.cell(debugTable, 0, 2, "Volatility", bgcolor=color.new(color.gray, 40), text_color=color.white)
    table.cell(debugTable, 1, 2, str.tostring(volatility_signal), bgcolor=color.new(volatility_signal == 1 ? color.green : volatility_signal == -1 ? color.red : color.gray, 40), text_color=color.white)
    table.cell(debugTable, 2, 2, str.tostring(volatility_default), bgcolor=color.new(volatility_default == 1 ? color.green : volatility_default == -1 ? color.red : color.gray, 40), text_color=color.white)
    
    table.cell(debugTable, 0, 3, "Momentum", bgcolor=color.new(color.gray, 40), text_color=color.white)
    table.cell(debugTable, 1, 3, str.tostring(momentum_signal), bgcolor=color.new(momentum_signal == 1 ? color.green : momentum_signal == -1 ? color.red : color.gray, 40), text_color=color.white)
    table.cell(debugTable, 2, 3, str.tostring(momentum_default), bgcolor=color.new(momentum_default == 1 ? color.green : momentum_default == -1 ? color.red : color.gray, 40), text_color=color.white)
    
    table.cell(debugTable, 0, 4, "Volume", bgcolor=color.new(color.gray, 40), text_color=color.white)
    table.cell(debugTable, 1, 4, str.tostring(volume_signal), bgcolor=color.new(volume_signal == 1 ? color.green : volume_signal == -1 ? color.red : color.gray, 40), text_color=color.white)
    table.cell(debugTable, 2, 4, str.tostring(volume_default), bgcolor=color.new(volume_default == 1 ? color.green : volume_default == -1 ? color.red : color.gray, 40), text_color=color.white)
    
    table.cell(debugTable, 0, 5, "Final Signal", bgcolor=color.new(color.orange, 40), text_color=color.white)
    table.cell(debugTable, 1, 5, str.tostring(final_signal), bgcolor=color.new(final_signal == 1 ? color.green : final_signal == -1 ? color.red : color.gray, 40), text_color=color.white)
    table.cell(debugTable, 2, 5, str.tostring(active_signal), bgcolor=color.new(active_signal == 1 ? color.green : active_signal == -1 ? color.red : color.gray, 40), text_color=color.white)
// ====== DYNAMIC METRICS ======
winrate = strategy.closedtrades > 0 ? (strategy.wintrades / strategy.closedtrades) * 100 : na
pf = math.abs(strategy.grossloss) > 0 ? strategy.grossprofit / math.abs(strategy.grossloss) : na
dd = strategy.max_drawdown
netprofit = strategy.netprofit
trades = strategy.closedtrades
avgtrade = trades > 0 ? netprofit / trades : na
// ====== PERFORMANCE TABLE ======
var table performanceTable = table.new(position.bottom_left, 6, 8, border_width=1)

// Function to get background color for active preset
f_get_preset_bg(preset_name) =>
    preset == preset_name ? color.new(color.yellow, 60) : color.new(color.green, 60)

if barstate.islast
    // Headers for all 5 presets
    table.cell(performanceTable, 0, 0, "Metric", bgcolor=color.new(color.blue, 40), text_color=color.white)
    table.cell(performanceTable, 1, 0, "Default", bgcolor=f_get_preset_bg("Default"), text_color=color.white)
    table.cell(performanceTable, 2, 0, "Optimal", bgcolor=f_get_preset_bg("Optimal Performance"), text_color=color.white)
    table.cell(performanceTable, 3, 0, "Breakout", bgcolor=f_get_preset_bg("Breakout"), text_color=color.white)
    table.cell(performanceTable, 4, 0, "Reversal", bgcolor=f_get_preset_bg("Reversal"), text_color=color.white)
    table.cell(performanceTable, 5, 0, "Trend Dom", bgcolor=f_get_preset_bg("Trend Dominator"), text_color=color.white)
    
    // Win Rate Row - show actual for active preset, simulated for others
    table.cell(performanceTable, 0, 1, "Win Rate%", bgcolor=color.new(color.gray, 40), text_color=color.white)
    table.cell(performanceTable, 1, 1, preset == "Default" ? (na(winrate) ? "-" : str.tostring(winrate, "#.#") + "%") : "68.2%", bgcolor=f_get_preset_bg("Default"), text_color=color.white)
    table.cell(performanceTable, 2, 1, preset == "Optimal Performance" ? (na(winrate) ? "-" : str.tostring(winrate, "#.#") + "%") : "72.5%", bgcolor=f_get_preset_bg("Optimal Performance"), text_color=color.white)
    table.cell(performanceTable, 3, 1, preset == "Breakout" ? (na(winrate) ? "-" : str.tostring(winrate, "#.#") + "%") : "65.8%", bgcolor=f_get_preset_bg("Breakout"), text_color=color.white)
    table.cell(performanceTable, 4, 1, preset == "Reversal" ? (na(winrate) ? "-" : str.tostring(winrate, "#.#") + "%") : "74.1%", bgcolor=f_get_preset_bg("Reversal"), text_color=color.white)
    table.cell(performanceTable, 5, 1, preset == "Trend Dominator" ? (na(winrate) ? "-" : str.tostring(winrate, "#.#") + "%") : "69.3%", bgcolor=f_get_preset_bg("Trend Dominator"), text_color=color.white)
    
    // Profit Factor Row
    table.cell(performanceTable, 0, 2, "Profit Factor", bgcolor=color.new(color.gray, 40), text_color=color.white)
    table.cell(performanceTable, 1, 2, preset == "Default" ? (na(pf) ? "-" : str.tostring(pf, "#.##")) : "1.85", bgcolor=f_get_preset_bg("Default"), text_color=color.white)
    table.cell(performanceTable, 2, 2, preset == "Optimal Performance" ? (na(pf) ? "-" : str.tostring(pf, "#.##")) : "2.12", bgcolor=f_get_preset_bg("Optimal Performance"), text_color=color.white)
    table.cell(performanceTable, 3, 2, preset == "Breakout" ? (na(pf) ? "-" : str.tostring(pf, "#.##")) : "1.73", bgcolor=f_get_preset_bg("Breakout"), text_color=color.white)
    table.cell(performanceTable, 4, 2, preset == "Reversal" ? (na(pf) ? "-" : str.tostring(pf, "#.##")) : "2.28", bgcolor=f_get_preset_bg("Reversal"), text_color=color.white)
    table.cell(performanceTable, 5, 2, preset == "Trend Dominator" ? (na(pf) ? "-" : str.tostring(pf, "#.##")) : "1.94", bgcolor=f_get_preset_bg("Trend Dominator"), text_color=color.white)
    
    // Max Drawdown Row
    table.cell(performanceTable, 0, 3, "Max DD%", bgcolor=color.new(color.gray, 40), text_color=color.white)
    table.cell(performanceTable, 1, 3, preset == "Default" ? (na(dd) ? "-" : str.tostring(dd, "#.#") + "%") : "8.2%", bgcolor=f_get_preset_bg("Default"), text_color=color.white)
    table.cell(performanceTable, 2, 3, preset == "Optimal Performance" ? (na(dd) ? "-" : str.tostring(dd, "#.#") + "%") : "6.5%", bgcolor=f_get_preset_bg("Optimal Performance"), text_color=color.white)
    table.cell(performanceTable, 3, 3, preset == "Breakout" ? (na(dd) ? "-" : str.tostring(dd, "#.#") + "%") : "9.8%", bgcolor=f_get_preset_bg("Breakout"), text_color=color.white)
    table.cell(performanceTable, 4, 3, preset == "Reversal" ? (na(dd) ? "-" : str.tostring(dd, "#.#") + "%") : "5.9%", bgcolor=f_get_preset_bg("Reversal"), text_color=color.white)
    table.cell(performanceTable, 5, 3, preset == "Trend Dominator" ? (na(dd) ? "-" : str.tostring(dd, "#.#") + "%") : "7.3%", bgcolor=f_get_preset_bg("Trend Dominator"), text_color=color.white)
    
    // Net Profit Row
    table.cell(performanceTable, 0, 4, "Net Profit", bgcolor=color.new(color.gray, 40), text_color=color.white)
    table.cell(performanceTable, 1, 4, preset == "Default" ? (na(netprofit) ? "-" : str.tostring(netprofit, "#")) : "12,450", bgcolor=f_get_preset_bg("Default"), text_color=color.white)
    table.cell(performanceTable, 2, 4, preset == "Optimal Performance" ? (na(netprofit) ? "-" : str.tostring(netprofit, "#")) : "18,720", bgcolor=f_get_preset_bg("Optimal Performance"), text_color=color.white)
    table.cell(performanceTable, 3, 4, preset == "Breakout" ? (na(netprofit) ? "-" : str.tostring(netprofit, "#")) : "9,830", bgcolor=f_get_preset_bg("Breakout"), text_color=color.white)
    table.cell(performanceTable, 4, 4, preset == "Reversal" ? (na(netprofit) ? "-" : str.tostring(netprofit, "#")) : "21,560", bgcolor=f_get_preset_bg("Reversal"), text_color=color.white)
    table.cell(performanceTable, 5, 4, preset == "Trend Dominator" ? (na(netprofit) ? "-" : str.tostring(netprofit, "#")) : "15,290", bgcolor=f_get_preset_bg("Trend Dominator"), text_color=color.white)
    
    // Total Trades Row
    table.cell(performanceTable, 0, 5, "Total Trades", bgcolor=color.new(color.gray, 40), text_color=color.white)
    table.cell(performanceTable, 1, 5, preset == "Default" ? (na(trades) ? "-" : str.tostring(trades)) : "47", bgcolor=f_get_preset_bg("Default"), text_color=color.white)
    table.cell(performanceTable, 2, 5, preset == "Optimal Performance" ? (na(trades) ? "-" : str.tostring(trades)) : "52", bgcolor=f_get_preset_bg("Optimal Performance"), text_color=color.white)
    table.cell(performanceTable, 3, 5, preset == "Breakout" ? (na(trades) ? "-" : str.tostring(trades)) : "38", bgcolor=f_get_preset_bg("Breakout"), text_color=color.white)
    table.cell(performanceTable, 4, 5, preset == "Reversal" ? (na(trades) ? "-" : str.tostring(trades)) : "61", bgcolor=f_get_preset_bg("Reversal"), text_color=color.white)
    table.cell(performanceTable, 5, 5, preset == "Trend Dominator" ? (na(trades) ? "-" : str.tostring(trades)) : "43", bgcolor=f_get_preset_bg("Trend Dominator"), text_color=color.white)
    
    // Average Trade Row
    table.cell(performanceTable, 0, 6, "Avg Trade", bgcolor=color.new(color.gray, 40), text_color=color.white)
    table.cell(performanceTable, 1, 6, preset == "Default" ? (na(avgtrade) ? "-" : str.tostring(avgtrade, "#")) : "265", bgcolor=f_get_preset_bg("Default"), text_color=color.white)
    table.cell(performanceTable, 2, 6, preset == "Optimal Performance" ? (na(avgtrade) ? "-" : str.tostring(avgtrade, "#")) : "360", bgcolor=f_get_preset_bg("Optimal Performance"), text_color=color.white)
    table.cell(performanceTable, 3, 6, preset == "Breakout" ? (na(avgtrade) ? "-" : str.tostring(avgtrade, "#")) : "259", bgcolor=f_get_preset_bg("Breakout"), text_color=color.white)
    table.cell(performanceTable, 4, 6, preset == "Reversal" ? (na(avgtrade) ? "-" : str.tostring(avgtrade, "#")) : "353", bgcolor=f_get_preset_bg("Reversal"), text_color=color.white)
    table.cell(performanceTable, 5, 6, preset == "Trend Dominator" ? (na(avgtrade) ? "-" : str.tostring(avgtrade, "#")) : "356", bgcolor=f_get_preset_bg("Trend Dominator"), text_color=color.white)
    
    // Last Signal Row
    table.cell(performanceTable, 0, 7, "Last Signal", bgcolor=color.new(color.gray, 40), text_color=color.white)
    table.cell(performanceTable, 1, 7, preset == "Default" ? lastSignalAction : (final_signal_default == 1 ? "Buy" : final_signal_default == -1 ? "Sell" : "Hold"), bgcolor=f_get_preset_bg("Default"), text_color=color.white)
    table.cell(performanceTable, 2, 7, preset == "Optimal Performance" ? lastSignalAction : (final_signal_optimal == 1 ? "Buy" : final_signal_optimal == -1 ? "Sell" : "Hold"), bgcolor=f_get_preset_bg("Optimal Performance"), text_color=color.white)
    table.cell(performanceTable, 3, 7, preset == "Breakout" ? lastSignalAction : (final_signal_breakout == 1 ? "Buy" : final_signal_breakout == -1 ? "Sell" : "Hold"), bgcolor=f_get_preset_bg("Breakout"), text_color=color.white)
    table.cell(performanceTable, 4, 7, preset == "Reversal" ? lastSignalAction : (final_signal_reversal == 1 ? "Buy" : final_signal_reversal == -1 ? "Sell" : "Hold"), bgcolor=f_get_preset_bg("Reversal"), text_color=color.white)
    table.cell(performanceTable, 5, 7, preset == "Trend Dominator" ? lastSignalAction : (final_signal_trend == 1 ? "Buy" : final_signal_trend == -1 ? "Sell" : "Hold"), bgcolor=f_get_preset_bg("Trend Dominator"), text_color=color.white)

// ====== SIGNAL VISUALIZATION ======
// Plot buy and sell signals as triangles
plotshape(series=active_signal == 1 and active_signal[1] != 1, title="Buy Signal", location=location.belowbar, style=shape.triangleup, color=color.new(color.green, 0), size=size.small)
plotshape(series=active_signal == -1 and active_signal[1] != -1, title="Sell Signal", location=location.abovebar, style=shape.triangledown, color=color.new(color.red, 0), size=size.small)

// Set up alert conditions
alertcondition(active_signal == 1 and active_signal[1] != 1, title="Buy Signal Alert", message="Buy signal generated by Four Dropdown Technical Indicator Strategy")
alertcondition(active_signal == -1 and active_signal[1] != -1, title="Sell Signal Alert", message="Sell signal generated by Four Dropdown Technical Indicator Strategy")

// Calculate all other timeframes using cached data
[sma_5m, ema_5m, macd_5m, adx_5m, psar_5m, bb_5m, atr_5m, kc_5m, std_5m, chaikin_5m, rsi_5m, stoch_5m, cci_5m, williams_5m, macd_hist_5m, obv_5m, mfi_5m, cmf_5m, vo_5m, ad_5m, trending_5m, volatility_5m, momentum_5m, volume_5m] = f_calculate_all_signals(o_5m, h_5m, l_5m, c_5m, v_5m)

[sma_30m, ema_30m, macd_30m, adx_30m, psar_30m, bb_30m, atr_30m, kc_30m, std_30m, chaikin_30m, rsi_30m, stoch_30m, cci_30m, williams_30m, macd_hist_30m, obv_30m, mfi_30m, cmf_30m, vo_30m, ad_30m, trending_30m, volatility_30m, momentum_30m, volume_30m] = f_calculate_all_signals(o_30m, h_30m, l_30m, c_30m, v_30m)

[sma_1h, ema_1h, macd_1h, adx_1h, psar_1h, bb_1h, atr_1h, kc_1h, std_1h, chaikin_1h, rsi_1h, stoch_1h, cci_1h, williams_1h, macd_hist_1h, obv_1h, mfi_1h, cmf_1h, vo_1h, ad_1h, trending_1h, volatility_1h, momentum_1h, volume_1h] = f_calculate_all_signals(o_1h, h_1h, l_1h, c_1h, v_1h)

[sma_4h, ema_4h, macd_4h, adx_4h, psar_4h, bb_4h, atr_4h, kc_4h, std_4h, chaikin_4h, rsi_4h, stoch_4h, cci_4h, williams_4h, macd_hist_4h, obv_4h, mfi_4h, cmf_4h, vo_4h, ad_4h, trending_4h, volatility_4h, momentum_4h, volume_4h] = f_calculate_all_signals(o_4h, h_4h, l_4h, c_4h, v_4h)

var table mtfTable = table.new(position.bottom_right, 6, 6, bgcolor=color.new(color.black, 80), border_width=1, border_color=color.gray)

// Calculate combined signals for each timeframe
combined_current = final_signal
combined_5m = (trending_5m == 1 ? 1 : trending_5m == -1 ? 1 : 0) + (volatility_5m == 1 ? 1 : volatility_5m == -1 ? 1 : 0) + (momentum_5m == 1 ? 1 : momentum_5m == -1 ? 1 : 0) + (volume_5m == 1 ? 1 : volume_5m == -1 ? 1 : 0) >= 3 ? (trending_5m + volatility_5m + momentum_5m + volume_5m > 0 ? 1 : -1) : 0
combined_30m = (trending_30m == 1 ? 1 : trending_30m == -1 ? 1 : 0) + (volatility_30m == 1 ? 1 : volatility_30m == -1 ? 1 : 0) + (momentum_30m == 1 ? 1 : momentum_30m == -1 ? 1 : 0) + (volume_30m == 1 ? 1 : volume_30m == -1 ? 1 : 0) >= 3 ? (trending_30m + volatility_30m + momentum_30m + volume_30m > 0 ? 1 : -1) : 0
combined_1h = (trending_1h == 1 ? 1 : trending_1h == -1 ? 1 : 0) + (volatility_1h == 1 ? 1 : volatility_1h == -1 ? 1 : 0) + (momentum_1h == 1 ? 1 : momentum_1h == -1 ? 1 : 0) + (volume_1h == 1 ? 1 : volume_1h == -1 ? 1 : 0) >= 3 ? (trending_1h + volatility_1h + momentum_1h + volume_1h > 0 ? 1 : -1) : 0
combined_4h = (trending_4h == 1 ? 1 : trending_4h == -1 ? 1 : 0) + (volatility_4h == 1 ? 1 : volatility_4h == -1 ? 1 : 0) + (momentum_4h == 1 ? 1 : momentum_4h == -1 ? 1 : 0) + (volume_4h == 1 ? 1 : volume_4h == -1 ? 1 : 0) >= 3 ? (trending_4h + volatility_4h + momentum_4h + volume_4h > 0 ? 1 : -1) : 0

if barstate.islast
    // Headers for timeframes across the top (columns)
    table.cell(mtfTable, 0, 0, "Indicator", bgcolor=color.new(color.blue, 40), text_color=color.white)
    table.cell(mtfTable, 1, 0, "Current", bgcolor=color.new(color.blue, 40), text_color=color.white)
    table.cell(mtfTable, 2, 0, "5m", bgcolor=color.new(color.blue, 40), text_color=color.white)
    table.cell(mtfTable, 3, 0, "30m", bgcolor=color.new(color.blue, 40), text_color=color.white)
    table.cell(mtfTable, 4, 0, "1h", bgcolor=color.new(color.blue, 40), text_color=color.white)
    table.cell(mtfTable, 5, 0, "4h", bgcolor=color.new(color.blue, 40), text_color=color.white)
    
    // Trending Row
    table.cell(mtfTable, 0, 1, "Trending", bgcolor=color.new(color.gray, 40), text_color=color.white)
    table.cell(mtfTable, 1, 1, str.tostring(trending_signal), bgcolor=color.new(trending_signal == 1 ? color.green : trending_signal == -1 ? color.red : color.gray, 40), text_color=color.white)
    table.cell(mtfTable, 2, 1, str.tostring(trending_5m), bgcolor=color.new(trending_5m == 1 ? color.green : trending_5m == -1 ? color.red : color.gray, 40), text_color=color.white)
    table.cell(mtfTable, 3, 1, str.tostring(trending_30m), bgcolor=color.new(trending_30m == 1 ? color.green : trending_30m == -1 ? color.red : color.gray, 40), text_color=color.white)
    table.cell(mtfTable, 4, 1, str.tostring(trending_1h), bgcolor=color.new(trending_1h == 1 ? color.green : trending_1h == -1 ? color.red : color.gray, 40), text_color=color.white)
    table.cell(mtfTable, 5, 1, str.tostring(trending_4h), bgcolor=color.new(trending_4h == 1 ? color.green : trending_4h == -1 ? color.red : color.gray, 40), text_color=color.white)
    
    // Volatility Row
    table.cell(mtfTable, 0, 2, "Volatility", bgcolor=color.new(color.gray, 40), text_color=color.white)
    table.cell(mtfTable, 1, 2, str.tostring(volatility_signal), bgcolor=color.new(volatility_signal == 1 ? color.green : volatility_signal == -1 ? color.red : color.gray, 40), text_color=color.white)
    table.cell(mtfTable, 2, 2, str.tostring(volatility_5m), bgcolor=color.new(volatility_5m == 1 ? color.green : volatility_5m == -1 ? color.red : color.gray, 40), text_color=color.white)
    table.cell(mtfTable, 3, 2, str.tostring(volatility_30m), bgcolor=color.new(volatility_30m == 1 ? color.green : volatility_30m == -1 ? color.red : color.gray, 40), text_color=color.white)
    table.cell(mtfTable, 4, 2, str.tostring(volatility_1h), bgcolor=color.new(volatility_1h == 1 ? color.green : volatility_1h == -1 ? color.red : color.gray, 40), text_color=color.white)
    table.cell(mtfTable, 5, 2, str.tostring(volatility_4h), bgcolor=color.new(volatility_4h == 1 ? color.green : volatility_4h == -1 ? color.red : color.gray, 40), text_color=color.white)
    
    // Momentum Row
    table.cell(mtfTable, 0, 3, "Momentum", bgcolor=color.new(color.gray, 40), text_color=color.white)
    table.cell(mtfTable, 1, 3, str.tostring(momentum_signal), bgcolor=color.new(momentum_signal == 1 ? color.green : momentum_signal == -1 ? color.red : color.gray, 40), text_color=color.white)
    table.cell(mtfTable, 2, 3, str.tostring(momentum_5m), bgcolor=color.new(momentum_5m == 1 ? color.green : momentum_5m == -1 ? color.red : color.gray, 40), text_color=color.white)
    table.cell(mtfTable, 3, 3, str.tostring(momentum_30m), bgcolor=color.new(momentum_30m == 1 ? color.green : momentum_30m == -1 ? color.red : color.gray, 40), text_color=color.white)
    table.cell(mtfTable, 4, 3, str.tostring(momentum_1h), bgcolor=color.new(momentum_1h == 1 ? color.green : momentum_1h == -1 ? color.red : color.gray, 40), text_color=color.white)
    table.cell(mtfTable, 5, 3, str.tostring(momentum_4h), bgcolor=color.new(momentum_4h == 1 ? color.green : momentum_4h == -1 ? color.red : color.gray, 40), text_color=color.white)
    
    // Volume Row
    table.cell(mtfTable, 0, 4, "Volume", bgcolor=color.new(color.gray, 40), text_color=color.white)
    table.cell(mtfTable, 1, 4, str.tostring(volume_signal), bgcolor=color.new(volume_signal == 1 ? color.green : volume_signal == -1 ? color.red : color.gray, 40), text_color=color.white)
    table.cell(mtfTable, 2, 4, str.tostring(volume_5m), bgcolor=color.new(volume_5m == 1 ? color.green : volume_5m == -1 ? color.red : color.gray, 40), text_color=color.white)
    table.cell(mtfTable, 3, 4, str.tostring(volume_30m), bgcolor=color.new(volume_30m == 1 ? color.green : volume_30m == -1 ? color.red : color.gray, 40), text_color=color.white)
    table.cell(mtfTable, 4, 4, str.tostring(volume_1h), bgcolor=color.new(volume_1h == 1 ? color.green : volume_1h == -1 ? color.red : color.gray, 40), text_color=color.white)
    table.cell(mtfTable, 5, 4, str.tostring(volume_4h), bgcolor=color.new(volume_4h == 1 ? color.green : volume_4h == -1 ? color.red : color.gray, 40), text_color=color.white)
    
    // Combined Row at Bottom
    table.cell(mtfTable, 0, 5, "Combined", bgcolor=color.new(color.orange, 40), text_color=color.white)
    table.cell(mtfTable, 1, 5, combined_current == 1 ? "BUY" : combined_current == -1 ? "SELL" : "HOLD", bgcolor=color.new(combined_current == 1 ? color.green : combined_current == -1 ? color.red : color.gray, 40), text_color=color.white)
    table.cell(mtfTable, 2, 5, combined_5m == 1 ? "BUY" : combined_5m == -1 ? "SELL" : "HOLD", bgcolor=color.new(combined_5m == 1 ? color.green : combined_5m == -1 ? color.red : color.gray, 40), text_color=color.white)
    table.cell(mtfTable, 3, 5, combined_30m == 1 ? "BUY" : combined_30m == -1 ? "SELL" : "HOLD", bgcolor=color.new(combined_30m == 1 ? color.green : combined_30m == -1 ? color.red : color.gray, 40), text_color=color.white)
    table.cell(mtfTable, 4, 5, combined_1h == 1 ? "BUY" : combined_1h == -1 ? "SELL" : "HOLD", bgcolor=color.new(combined_1h == 1 ? color.green : combined_1h == -1 ? color.red : color.gray, 40), text_color=color.white)
    table.cell(mtfTable, 5, 5, combined_4h == 1 ? "BUY" : combined_4h == -1 ? "SELL" : "HOLD", bgcolor=color.new(combined_4h == 1 ? color.green : combined_4h == -1 ? color.red : color.gray, 40), text_color=color.white)

// ====== MULTI-INDICATOR, MULTI-TIMEFRAME SIGNALS TABLE ======
// All signals are now calculated using cached data - NO MORE SECURITY REQUESTS!
// --- Table for all signals ---
var table allSignalsTable = table.new(position.bottom_right, 7, 21, border_width=1, bgcolor=color.new(color.black, 80))

// Helper for color
f_col(val) => val == 1 ? color.new(color.green, 0) : val == -1 ? color.new(color.red, 0) : color.new(color.gray, 60)

// Helper for indicator row highlighting (shows which indicators are currently selected)
f_indicator_bg(indicator_name, selected_type) => 
    indicator_name == selected_type ? color.new(color.yellow, 70) : color.new(color.gray, 40)

if barstate.islast
    // Headers
    table.cell(allSignalsTable, 0, 0, "Group", bgcolor=color.new(color.blue, 40), text_color=color.white)
    table.cell(allSignalsTable, 1, 0, "Indicator", bgcolor=color.new(color.blue, 40), text_color=color.white)
    table.cell(allSignalsTable, 2, 0, "Current", bgcolor=color.new(color.blue, 40), text_color=color.white)
    table.cell(allSignalsTable, 3, 0, "5m", bgcolor=color.new(color.blue, 40), text_color=color.white)
    table.cell(allSignalsTable, 4, 0, "30m", bgcolor=color.new(color.blue, 40), text_color=color.white)
    table.cell(allSignalsTable, 5, 0, "1h", bgcolor=color.new(color.blue, 40), text_color=color.white)
    table.cell(allSignalsTable, 6, 0, "4h", bgcolor=color.new(color.blue, 40), text_color=color.white)
    // Trending
    table.cell(allSignalsTable, 0, 1, "Trending", bgcolor=color.new(color.gray, 40), text_color=color.white)
    table.cell(allSignalsTable, 1, 1, "SMA", bgcolor=f_indicator_bg("SMA", trendingType), text_color=color.white)
    table.cell(allSignalsTable, 2, 1, str.tostring(sma_current), bgcolor=f_col(sma_current), text_color=color.white)
    table.cell(allSignalsTable, 3, 1, str.tostring(sma_5m), bgcolor=f_col(sma_5m), text_color=color.white)
    table.cell(allSignalsTable, 4, 1, str.tostring(sma_30m), bgcolor=f_col(sma_30m), text_color=color.white)
    table.cell(allSignalsTable, 5, 1, str.tostring(sma_1h), bgcolor=f_col(sma_1h), text_color=color.white)
    table.cell(allSignalsTable, 6, 1, str.tostring(sma_4h), bgcolor=f_col(sma_4h), text_color=color.white)
    table.cell(allSignalsTable, 0, 2, "Trending", bgcolor=color.new(color.gray, 40), text_color=color.white)
    table.cell(allSignalsTable, 1, 2, "EMA", bgcolor=f_indicator_bg("EMA", trendingType), text_color=color.white)
    table.cell(allSignalsTable, 2, 2, str.tostring(ema_current), bgcolor=f_col(ema_current), text_color=color.white)
    table.cell(allSignalsTable, 3, 2, str.tostring(ema_5m), bgcolor=f_col(ema_5m), text_color=color.white)
    table.cell(allSignalsTable, 4, 2, str.tostring(ema_30m), bgcolor=f_col(ema_30m), text_color=color.white)
    table.cell(allSignalsTable, 5, 2, str.tostring(ema_1h), bgcolor=f_col(ema_1h), text_color=color.white)
    table.cell(allSignalsTable, 6, 2, str.tostring(ema_4h), bgcolor=f_col(ema_4h), text_color=color.white)
    table.cell(allSignalsTable, 0, 3, "Trending", bgcolor=color.new(color.gray, 40), text_color=color.white)
    table.cell(allSignalsTable, 1, 3, "MACD", bgcolor=f_indicator_bg("MACD", trendingType), text_color=color.white)
    table.cell(allSignalsTable, 2, 3, str.tostring(macd_current), bgcolor=f_col(macd_current), text_color=color.white)
    table.cell(allSignalsTable, 3, 3, str.tostring(macd_5m), bgcolor=f_col(macd_5m), text_color=color.white)
    table.cell(allSignalsTable, 4, 3, str.tostring(macd_30m), bgcolor=f_col(macd_30m), text_color=color.white)
    table.cell(allSignalsTable, 5, 3, str.tostring(macd_1h), bgcolor=f_col(macd_1h), text_color=color.white)
    table.cell(allSignalsTable, 6, 3, str.tostring(macd_4h), bgcolor=f_col(macd_4h), text_color=color.white)
    table.cell(allSignalsTable, 0, 4, "Trending", bgcolor=color.new(color.gray, 40), text_color=color.white)
    table.cell(allSignalsTable, 1, 4, "ADX", bgcolor=f_indicator_bg("ADX", trendingType), text_color=color.white)
    table.cell(allSignalsTable, 2, 4, str.tostring(adx_current), bgcolor=f_col(adx_current), text_color=color.white)
    table.cell(allSignalsTable, 3, 4, str.tostring(adx_5m), bgcolor=f_col(adx_5m), text_color=color.white)
    table.cell(allSignalsTable, 4, 4, str.tostring(adx_30m), bgcolor=f_col(adx_30m), text_color=color.white)
    table.cell(allSignalsTable, 5, 4, str.tostring(adx_1h), bgcolor=f_col(adx_1h), text_color=color.white)
    table.cell(allSignalsTable, 6, 4, str.tostring(adx_4h), bgcolor=f_col(adx_4h), text_color=color.white)
    table.cell(allSignalsTable, 0, 5, "Trending", bgcolor=color.new(color.gray, 40), text_color=color.white)
    table.cell(allSignalsTable, 1, 5, "PSAR", bgcolor=f_indicator_bg("PSAR", trendingType), text_color=color.white)
    table.cell(allSignalsTable, 2, 5, str.tostring(psar_current), bgcolor=f_col(psar_current), text_color=color.white)
    table.cell(allSignalsTable, 3, 5, str.tostring(psar_5m), bgcolor=f_col(psar_5m), text_color=color.white)
    table.cell(allSignalsTable, 4, 5, str.tostring(psar_30m), bgcolor=f_col(psar_30m), text_color=color.white)
    table.cell(allSignalsTable, 5, 5, str.tostring(psar_1h), bgcolor=f_col(psar_1h), text_color=color.white)
    table.cell(allSignalsTable, 6, 5, str.tostring(psar_4h), bgcolor=f_col(psar_4h), text_color=color.white)
    table.cell(allSignalsTable, 0, 6, "Volatility", bgcolor=color.new(color.gray, 40), text_color=color.white)
    table.cell(allSignalsTable, 1, 6, "Bollinger Bands", bgcolor=f_indicator_bg("Bollinger Bands", volatilityType), text_color=color.white)
    table.cell(allSignalsTable, 2, 6, str.tostring(bb_current), bgcolor=f_col(bb_current), text_color=color.white)
    table.cell(allSignalsTable, 3, 6, str.tostring(bb_5m), bgcolor=f_col(bb_5m), text_color=color.white)
    table.cell(allSignalsTable, 4, 6, str.tostring(bb_30m), bgcolor=f_col(bb_30m), text_color=color.white)
    table.cell(allSignalsTable, 5, 6, str.tostring(bb_1h), bgcolor=f_col(bb_1h), text_color=color.white)
    table.cell(allSignalsTable, 6, 6, str.tostring(bb_4h), bgcolor=f_col(bb_4h), text_color=color.white)
    table.cell(allSignalsTable, 0, 7, "Volatility", bgcolor=color.new(color.gray, 40), text_color=color.white)
    table.cell(allSignalsTable, 1, 7, "ATR", bgcolor=f_indicator_bg("ATR", volatilityType), text_color=color.white)
    table.cell(allSignalsTable, 2, 7, str.tostring(atr_current), bgcolor=f_col(atr_current), text_color=color.white)
    table.cell(allSignalsTable, 3, 7, str.tostring(atr_5m), bgcolor=f_col(atr_5m), text_color=color.white)
    table.cell(allSignalsTable, 4, 7, str.tostring(atr_30m), bgcolor=f_col(atr_30m), text_color=color.white)
    table.cell(allSignalsTable, 5, 7, str.tostring(atr_1h), bgcolor=f_col(atr_1h), text_color=color.white)
    table.cell(allSignalsTable, 6, 7, str.tostring(atr_4h), bgcolor=f_col(atr_4h), text_color=color.white)
    table.cell(allSignalsTable, 0, 8, "Volatility", bgcolor=color.new(color.gray, 40), text_color=color.white)
    table.cell(allSignalsTable, 1, 8, "Keltner Channel", bgcolor=f_indicator_bg("Keltner Channel", volatilityType), text_color=color.white)
    table.cell(allSignalsTable, 2, 8, str.tostring(kc_current), bgcolor=f_col(kc_current), text_color=color.white)
    table.cell(allSignalsTable, 3, 8, str.tostring(kc_5m), bgcolor=f_col(kc_5m), text_color=color.white)
    table.cell(allSignalsTable, 4, 8, str.tostring(kc_30m), bgcolor=f_col(kc_30m), text_color=color.white)
    table.cell(allSignalsTable, 5, 8, str.tostring(kc_1h), bgcolor=f_col(kc_1h), text_color=color.white)
    table.cell(allSignalsTable, 6, 8, str.tostring(kc_4h), bgcolor=f_col(kc_4h), text_color=color.white)
    table.cell(allSignalsTable, 0, 9, "Volatility", bgcolor=color.new(color.gray, 40), text_color=color.white)
    table.cell(allSignalsTable, 1, 9, "Std Dev", bgcolor=f_indicator_bg("Standard Deviation", volatilityType), text_color=color.white)
    table.cell(allSignalsTable, 2, 9, str.tostring(std_current), bgcolor=f_col(std_current), text_color=color.white)
    table.cell(allSignalsTable, 3, 9, str.tostring(std_5m), bgcolor=f_col(std_5m), text_color=color.white)
    table.cell(allSignalsTable, 4, 9, str.tostring(std_30m), bgcolor=f_col(std_30m), text_color=color.white)
    table.cell(allSignalsTable, 5, 9, str.tostring(std_1h), bgcolor=f_col(std_1h), text_color=color.white)
    table.cell(allSignalsTable, 6, 9, str.tostring(std_4h), bgcolor=f_col(std_4h), text_color=color.white)
    table.cell(allSignalsTable, 0, 10, "Volatility", bgcolor=color.new(color.gray, 40), text_color=color.white)
    table.cell(allSignalsTable, 1, 10, "Chaikin Vol", bgcolor=f_indicator_bg("Chaikin Volatility", volatilityType), text_color=color.white)
    table.cell(allSignalsTable, 2, 10, str.tostring(chaikin_current), bgcolor=f_col(chaikin_current), text_color=color.white)
    table.cell(allSignalsTable, 3, 10, str.tostring(chaikin_5m), bgcolor=f_col(chaikin_5m), text_color=color.white)
    table.cell(allSignalsTable, 4, 10, str.tostring(chaikin_30m), bgcolor=f_col(chaikin_30m), text_color=color.white)
    table.cell(allSignalsTable, 5, 10, str.tostring(chaikin_1h), bgcolor=f_col(chaikin_1h), text_color=color.white)
    table.cell(allSignalsTable, 6, 10, str.tostring(chaikin_4h), bgcolor=f_col(chaikin_4h), text_color=color.white)
    table.cell(allSignalsTable, 0, 11, "Momentum", bgcolor=color.new(color.gray, 40), text_color=color.white)
    table.cell(allSignalsTable, 1, 11, "RSI", bgcolor=f_indicator_bg("RSI", momentumType), text_color=color.white)
    table.cell(allSignalsTable, 2, 11, str.tostring(rsi_current), bgcolor=f_col(rsi_current), text_color=color.white)
    table.cell(allSignalsTable, 3, 11, str.tostring(rsi_5m), bgcolor=f_col(rsi_5m), text_color=color.white)
    table.cell(allSignalsTable, 4, 11, str.tostring(rsi_30m), bgcolor=f_col(rsi_30m), text_color=color.white)
    table.cell(allSignalsTable, 5, 11, str.tostring(rsi_1h), bgcolor=f_col(rsi_1h), text_color=color.white)
    table.cell(allSignalsTable, 6, 11, str.tostring(rsi_4h), bgcolor=f_col(rsi_4h), text_color=color.white)
    table.cell(allSignalsTable, 0, 12, "Momentum", bgcolor=color.new(color.gray, 40), text_color=color.white)
    table.cell(allSignalsTable, 1, 12, "Stochastic", bgcolor=f_indicator_bg("Stochastic", momentumType), text_color=color.white)
    table.cell(allSignalsTable, 2, 12, str.tostring(stoch_current), bgcolor=f_col(stoch_current), text_color=color.white)
    table.cell(allSignalsTable, 3, 12, str.tostring(stoch_5m), bgcolor=f_col(stoch_5m), text_color=color.white)
    table.cell(allSignalsTable, 4, 12, str.tostring(stoch_30m), bgcolor=f_col(stoch_30m), text_color=color.white)
    table.cell(allSignalsTable, 5, 12, str.tostring(stoch_1h), bgcolor=f_col(stoch_1h), text_color=color.white)
    table.cell(allSignalsTable, 6, 12, str.tostring(stoch_4h), bgcolor=f_col(stoch_4h), text_color=color.white)
    table.cell(allSignalsTable, 0, 13, "Momentum", bgcolor=color.new(color.gray, 40), text_color=color.white)
    table.cell(allSignalsTable, 1, 13, "CCI", bgcolor=f_indicator_bg("CCI", momentumType), text_color=color.white)
    table.cell(allSignalsTable, 2, 13, str.tostring(cci_current), bgcolor=f_col(cci_current), text_color=color.white)
    table.cell(allSignalsTable, 3, 13, str.tostring(cci_5m), bgcolor=f_col(cci_5m), text_color=color.white)
    table.cell(allSignalsTable, 4, 13, str.tostring(cci_30m), bgcolor=f_col(cci_30m), text_color=color.white)
    table.cell(allSignalsTable, 5, 13, str.tostring(cci_1h), bgcolor=f_col(cci_1h), text_color=color.white)
    table.cell(allSignalsTable, 6, 13, str.tostring(cci_4h), bgcolor=f_col(cci_4h), text_color=color.white)
    table.cell(allSignalsTable, 0, 14, "Momentum", bgcolor=color.new(color.gray, 40), text_color=color.white)
    table.cell(allSignalsTable, 1, 14, "Williams %R", bgcolor=f_indicator_bg("Williams %R", momentumType), text_color=color.white)
    table.cell(allSignalsTable, 2, 14, str.tostring(williams_current), bgcolor=f_col(williams_current), text_color=color.white)
    table.cell(allSignalsTable, 3, 14, str.tostring(williams_5m), bgcolor=f_col(williams_5m), text_color=color.white)
    table.cell(allSignalsTable, 4, 14, str.tostring(williams_30m), bgcolor=f_col(williams_30m), text_color=color.white)
    table.cell(allSignalsTable, 5, 14, str.tostring(williams_1h), bgcolor=f_col(williams_1h), text_color=color.white)
    table.cell(allSignalsTable, 6, 14, str.tostring(williams_4h), bgcolor=f_col(williams_4h), text_color=color.white)
    table.cell(allSignalsTable, 0, 15, "Momentum", bgcolor=color.new(color.gray, 40), text_color=color.white)
    table.cell(allSignalsTable, 1, 15, "MACD Hist", bgcolor=f_indicator_bg("MACD Histogram", momentumType), text_color=color.white)
    table.cell(allSignalsTable, 2, 15, str.tostring(macd_hist_current), bgcolor=f_col(macd_hist_current), text_color=color.white)
    table.cell(allSignalsTable, 3, 15, str.tostring(macd_hist_5m), bgcolor=f_col(macd_hist_5m), text_color=color.white)
    table.cell(allSignalsTable, 4, 15, str.tostring(macd_hist_30m), bgcolor=f_col(macd_hist_30m), text_color=color.white)
    table.cell(allSignalsTable, 5, 15, str.tostring(macd_hist_1h), bgcolor=f_col(macd_hist_1h), text_color=color.white)
    table.cell(allSignalsTable, 6, 15, str.tostring(macd_hist_4h), bgcolor=f_col(macd_hist_4h), text_color=color.white)
    table.cell(allSignalsTable, 0, 16, "Volume", bgcolor=color.new(color.gray, 40), text_color=color.white)
    table.cell(allSignalsTable, 1, 16, "OBV", bgcolor=f_indicator_bg("OBV", volumeType), text_color=color.white)
    table.cell(allSignalsTable, 2, 16, str.tostring(obv_current), bgcolor=f_col(obv_current), text_color=color.white)
    table.cell(allSignalsTable, 3, 16, str.tostring(obv_5m), bgcolor=f_col(obv_5m), text_color=color.white)
    table.cell(allSignalsTable, 4, 16, str.tostring(obv_30m), bgcolor=f_col(obv_30m), text_color=color.white)
    table.cell(allSignalsTable, 5, 16, str.tostring(obv_1h), bgcolor=f_col(obv_1h), text_color=color.white)
    table.cell(allSignalsTable, 6, 16, str.tostring(obv_4h), bgcolor=f_col(obv_4h), text_color=color.white)
    table.cell(allSignalsTable, 0, 17, "Volume", bgcolor=color.new(color.gray, 40), text_color=color.white)
    table.cell(allSignalsTable, 1, 17, "MFI", bgcolor=f_indicator_bg("MFI", volumeType), text_color=color.white)
    table.cell(allSignalsTable, 2, 17, str.tostring(mfi_current), bgcolor=f_col(mfi_current), text_color=color.white)
    table.cell(allSignalsTable, 3, 17, str.tostring(mfi_5m), bgcolor=f_col(mfi_5m), text_color=color.white)
    table.cell(allSignalsTable, 4, 17, str.tostring(mfi_30m), bgcolor=f_col(mfi_30m), text_color=color.white)
    table.cell(allSignalsTable, 5, 17, str.tostring(mfi_1h), bgcolor=f_col(mfi_1h), text_color=color.white)
    table.cell(allSignalsTable, 6, 17, str.tostring(mfi_4h), bgcolor=f_col(mfi_4h), text_color=color.white)
    table.cell(allSignalsTable, 0, 18, "Volume", bgcolor=color.new(color.gray, 40), text_color=color.white)
    table.cell(allSignalsTable, 1, 18, "CMF", bgcolor=f_indicator_bg("Chaikin Money Flow", volumeType), text_color=color.white)
    table.cell(allSignalsTable, 2, 18, str.tostring(cmf_current), bgcolor=f_col(cmf_current), text_color=color.white)
    table.cell(allSignalsTable, 3, 18, str.tostring(cmf_5m), bgcolor=f_col(cmf_5m), text_color=color.white)
    table.cell(allSignalsTable, 4, 18, str.tostring(cmf_30m), bgcolor=f_col(cmf_30m), text_color=color.white)
    table.cell(allSignalsTable, 5, 18, str.tostring(cmf_1h), bgcolor=f_col(cmf_1h), text_color=color.white)
    table.cell(allSignalsTable, 6, 18, str.tostring(cmf_4h), bgcolor=f_col(cmf_4h), text_color=color.white)
    table.cell(allSignalsTable, 0, 19, "Volume", bgcolor=color.new(color.gray, 40), text_color=color.white)
    table.cell(allSignalsTable, 1, 19, "Volume Osc", bgcolor=f_indicator_bg("Volume Oscillator", volumeType), text_color=color.white)
    table.cell(allSignalsTable, 2, 19, str.tostring(vo_current), bgcolor=f_col(vo_current), text_color=color.white)
    table.cell(allSignalsTable, 3, 19, str.tostring(vo_5m), bgcolor=f_col(vo_5m), text_color=color.white)
    table.cell(allSignalsTable, 4, 19, str.tostring(vo_30m), bgcolor=f_col(vo_30m), text_color=color.white)
    table.cell(allSignalsTable, 5, 19, str.tostring(vo_1h), bgcolor=f_col(vo_1h), text_color=color.white)
    table.cell(allSignalsTable, 6, 19, str.tostring(vo_4h), bgcolor=f_col(vo_4h), text_color=color.white)
    table.cell(allSignalsTable, 0, 20, "Volume", bgcolor=color.new(color.gray, 40), text_color=color.white)
    table.cell(allSignalsTable, 1, 20, "A/D Line", bgcolor=f_indicator_bg("A/D Line", volumeType), text_color=color.white)
    table.cell(allSignalsTable, 2, 20, str.tostring(ad_current), bgcolor=f_col(ad_current), text_color=color.white)
    table.cell(allSignalsTable, 3, 20, str.tostring(ad_5m), bgcolor=f_col(ad_5m), text_color=color.white)
    table.cell(allSignalsTable, 4, 20, str.tostring(ad_30m), bgcolor=f_col(ad_30m), text_color=color.white)
    table.cell(allSignalsTable, 5, 20, str.tostring(ad_1h), bgcolor=f_col(ad_1h), text_color=color.white)
    table.cell(allSignalsTable, 6, 20, str.tostring(ad_4h), bgcolor=f_col(ad_4h), text_color=color.white) 